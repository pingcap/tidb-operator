// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/service.proto

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cluster_CreateCluster_FullMethodName  = "/api.Cluster/CreateCluster"
	Cluster_UpdateCluster_FullMethodName  = "/api.Cluster/UpdateCluster"
	Cluster_GetCluster_FullMethodName     = "/api.Cluster/GetCluster"
	Cluster_DeleteCluster_FullMethodName  = "/api.Cluster/DeleteCluster"
	Cluster_RestartCluster_FullMethodName = "/api.Cluster/RestartCluster"
	Cluster_PauseCluster_FullMethodName   = "/api.Cluster/PauseCluster"
	Cluster_ResumeCluster_FullMethodName  = "/api.Cluster/ResumeCluster"
	Cluster_CreateBackup_FullMethodName   = "/api.Cluster/CreateBackup"
	Cluster_CreateRestore_FullMethodName  = "/api.Cluster/CreateRestore"
	Cluster_GetBackup_FullMethodName      = "/api.Cluster/GetBackup"
	Cluster_GetRestore_FullMethodName     = "/api.Cluster/GetRestore"
	Cluster_StopBackup_FullMethodName     = "/api.Cluster/StopBackup"
	Cluster_StopRestore_FullMethodName    = "/api.Cluster/StopRestore"
	Cluster_DeleteBackup_FullMethodName   = "/api.Cluster/DeleteBackup"
)

// ClusterClient is the client API for Cluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterClient interface {
	CreateCluster(ctx context.Context, in *CreateClusterReq, opts ...grpc.CallOption) (*CreateClusterResp, error)
	UpdateCluster(ctx context.Context, in *UpdateClusterReq, opts ...grpc.CallOption) (*UpdateClusterResp, error)
	GetCluster(ctx context.Context, in *GetClusterReq, opts ...grpc.CallOption) (*GetClusterResp, error)
	DeleteCluster(ctx context.Context, in *DeleteClusterReq, opts ...grpc.CallOption) (*DeleteClusterResp, error)
	RestartCluster(ctx context.Context, in *RestartClusterReq, opts ...grpc.CallOption) (*RestartClusterResp, error)
	PauseCluster(ctx context.Context, in *PauseClusterReq, opts ...grpc.CallOption) (*PauseClusterResp, error)
	ResumeCluster(ctx context.Context, in *ResumeClusterReq, opts ...grpc.CallOption) (*ResumeClusterResp, error)
	CreateBackup(ctx context.Context, in *CreateBackupReq, opts ...grpc.CallOption) (*CreateBackupResp, error)
	CreateRestore(ctx context.Context, in *CreateRestoreReq, opts ...grpc.CallOption) (*CreateRestoreResp, error)
	GetBackup(ctx context.Context, in *GetBackupReq, opts ...grpc.CallOption) (*GetBackupResp, error)
	GetRestore(ctx context.Context, in *GetRestoreReq, opts ...grpc.CallOption) (*GetRestoreResp, error)
	StopBackup(ctx context.Context, in *StopBackupReq, opts ...grpc.CallOption) (*StopBackupResp, error)
	StopRestore(ctx context.Context, in *StopRestoreReq, opts ...grpc.CallOption) (*StopRestoreResp, error)
	DeleteBackup(ctx context.Context, in *DeleteBackupReq, opts ...grpc.CallOption) (*DeleteBackupResp, error)
}

type clusterClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterClient(cc grpc.ClientConnInterface) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) CreateCluster(ctx context.Context, in *CreateClusterReq, opts ...grpc.CallOption) (*CreateClusterResp, error) {
	out := new(CreateClusterResp)
	err := c.cc.Invoke(ctx, Cluster_CreateCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) UpdateCluster(ctx context.Context, in *UpdateClusterReq, opts ...grpc.CallOption) (*UpdateClusterResp, error) {
	out := new(UpdateClusterResp)
	err := c.cc.Invoke(ctx, Cluster_UpdateCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetCluster(ctx context.Context, in *GetClusterReq, opts ...grpc.CallOption) (*GetClusterResp, error) {
	out := new(GetClusterResp)
	err := c.cc.Invoke(ctx, Cluster_GetCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) DeleteCluster(ctx context.Context, in *DeleteClusterReq, opts ...grpc.CallOption) (*DeleteClusterResp, error) {
	out := new(DeleteClusterResp)
	err := c.cc.Invoke(ctx, Cluster_DeleteCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) RestartCluster(ctx context.Context, in *RestartClusterReq, opts ...grpc.CallOption) (*RestartClusterResp, error) {
	out := new(RestartClusterResp)
	err := c.cc.Invoke(ctx, Cluster_RestartCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) PauseCluster(ctx context.Context, in *PauseClusterReq, opts ...grpc.CallOption) (*PauseClusterResp, error) {
	out := new(PauseClusterResp)
	err := c.cc.Invoke(ctx, Cluster_PauseCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) ResumeCluster(ctx context.Context, in *ResumeClusterReq, opts ...grpc.CallOption) (*ResumeClusterResp, error) {
	out := new(ResumeClusterResp)
	err := c.cc.Invoke(ctx, Cluster_ResumeCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) CreateBackup(ctx context.Context, in *CreateBackupReq, opts ...grpc.CallOption) (*CreateBackupResp, error) {
	out := new(CreateBackupResp)
	err := c.cc.Invoke(ctx, Cluster_CreateBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) CreateRestore(ctx context.Context, in *CreateRestoreReq, opts ...grpc.CallOption) (*CreateRestoreResp, error) {
	out := new(CreateRestoreResp)
	err := c.cc.Invoke(ctx, Cluster_CreateRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetBackup(ctx context.Context, in *GetBackupReq, opts ...grpc.CallOption) (*GetBackupResp, error) {
	out := new(GetBackupResp)
	err := c.cc.Invoke(ctx, Cluster_GetBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetRestore(ctx context.Context, in *GetRestoreReq, opts ...grpc.CallOption) (*GetRestoreResp, error) {
	out := new(GetRestoreResp)
	err := c.cc.Invoke(ctx, Cluster_GetRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) StopBackup(ctx context.Context, in *StopBackupReq, opts ...grpc.CallOption) (*StopBackupResp, error) {
	out := new(StopBackupResp)
	err := c.cc.Invoke(ctx, Cluster_StopBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) StopRestore(ctx context.Context, in *StopRestoreReq, opts ...grpc.CallOption) (*StopRestoreResp, error) {
	out := new(StopRestoreResp)
	err := c.cc.Invoke(ctx, Cluster_StopRestore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) DeleteBackup(ctx context.Context, in *DeleteBackupReq, opts ...grpc.CallOption) (*DeleteBackupResp, error) {
	out := new(DeleteBackupResp)
	err := c.cc.Invoke(ctx, Cluster_DeleteBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServer is the server API for Cluster service.
// All implementations must embed UnimplementedClusterServer
// for forward compatibility
type ClusterServer interface {
	CreateCluster(context.Context, *CreateClusterReq) (*CreateClusterResp, error)
	UpdateCluster(context.Context, *UpdateClusterReq) (*UpdateClusterResp, error)
	GetCluster(context.Context, *GetClusterReq) (*GetClusterResp, error)
	DeleteCluster(context.Context, *DeleteClusterReq) (*DeleteClusterResp, error)
	RestartCluster(context.Context, *RestartClusterReq) (*RestartClusterResp, error)
	PauseCluster(context.Context, *PauseClusterReq) (*PauseClusterResp, error)
	ResumeCluster(context.Context, *ResumeClusterReq) (*ResumeClusterResp, error)
	CreateBackup(context.Context, *CreateBackupReq) (*CreateBackupResp, error)
	CreateRestore(context.Context, *CreateRestoreReq) (*CreateRestoreResp, error)
	GetBackup(context.Context, *GetBackupReq) (*GetBackupResp, error)
	GetRestore(context.Context, *GetRestoreReq) (*GetRestoreResp, error)
	StopBackup(context.Context, *StopBackupReq) (*StopBackupResp, error)
	StopRestore(context.Context, *StopRestoreReq) (*StopRestoreResp, error)
	DeleteBackup(context.Context, *DeleteBackupReq) (*DeleteBackupResp, error)
	mustEmbedUnimplementedClusterServer()
}

// UnimplementedClusterServer must be embedded to have forward compatible implementations.
type UnimplementedClusterServer struct {
}

func (UnimplementedClusterServer) CreateCluster(context.Context, *CreateClusterReq) (*CreateClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (UnimplementedClusterServer) UpdateCluster(context.Context, *UpdateClusterReq) (*UpdateClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCluster not implemented")
}
func (UnimplementedClusterServer) GetCluster(context.Context, *GetClusterReq) (*GetClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedClusterServer) DeleteCluster(context.Context, *DeleteClusterReq) (*DeleteClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedClusterServer) RestartCluster(context.Context, *RestartClusterReq) (*RestartClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartCluster not implemented")
}
func (UnimplementedClusterServer) PauseCluster(context.Context, *PauseClusterReq) (*PauseClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseCluster not implemented")
}
func (UnimplementedClusterServer) ResumeCluster(context.Context, *ResumeClusterReq) (*ResumeClusterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeCluster not implemented")
}
func (UnimplementedClusterServer) CreateBackup(context.Context, *CreateBackupReq) (*CreateBackupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackup not implemented")
}
func (UnimplementedClusterServer) CreateRestore(context.Context, *CreateRestoreReq) (*CreateRestoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRestore not implemented")
}
func (UnimplementedClusterServer) GetBackup(context.Context, *GetBackupReq) (*GetBackupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackup not implemented")
}
func (UnimplementedClusterServer) GetRestore(context.Context, *GetRestoreReq) (*GetRestoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestore not implemented")
}
func (UnimplementedClusterServer) StopBackup(context.Context, *StopBackupReq) (*StopBackupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBackup not implemented")
}
func (UnimplementedClusterServer) StopRestore(context.Context, *StopRestoreReq) (*StopRestoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRestore not implemented")
}
func (UnimplementedClusterServer) DeleteBackup(context.Context, *DeleteBackupReq) (*DeleteBackupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackup not implemented")
}
func (UnimplementedClusterServer) mustEmbedUnimplementedClusterServer() {}

// UnsafeClusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterServer will
// result in compilation errors.
type UnsafeClusterServer interface {
	mustEmbedUnimplementedClusterServer()
}

func RegisterClusterServer(s grpc.ServiceRegistrar, srv ClusterServer) {
	s.RegisterService(&Cluster_ServiceDesc, srv)
}

func _Cluster_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_CreateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).CreateCluster(ctx, req.(*CreateClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_UpdateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).UpdateCluster(ctx, req.(*UpdateClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_GetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetCluster(ctx, req.(*GetClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_DeleteCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).DeleteCluster(ctx, req.(*DeleteClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_RestartCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).RestartCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_RestartCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).RestartCluster(ctx, req.(*RestartClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_PauseCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).PauseCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_PauseCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).PauseCluster(ctx, req.(*PauseClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_ResumeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ResumeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_ResumeCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ResumeCluster(ctx, req.(*ResumeClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_CreateBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).CreateBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_CreateBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).CreateBackup(ctx, req.(*CreateBackupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_CreateRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRestoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).CreateRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_CreateRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).CreateRestore(ctx, req.(*CreateRestoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_GetBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetBackup(ctx, req.(*GetBackupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_GetRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetRestore(ctx, req.(*GetRestoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_StopBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopBackupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).StopBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_StopBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).StopBackup(ctx, req.(*StopBackupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_StopRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRestoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).StopRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_StopRestore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).StopRestore(ctx, req.(*StopRestoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_DeleteBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).DeleteBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_DeleteBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).DeleteBackup(ctx, req.(*DeleteBackupReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Cluster_ServiceDesc is the grpc.ServiceDesc for Cluster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cluster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCluster",
			Handler:    _Cluster_CreateCluster_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _Cluster_UpdateCluster_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _Cluster_GetCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _Cluster_DeleteCluster_Handler,
		},
		{
			MethodName: "RestartCluster",
			Handler:    _Cluster_RestartCluster_Handler,
		},
		{
			MethodName: "PauseCluster",
			Handler:    _Cluster_PauseCluster_Handler,
		},
		{
			MethodName: "ResumeCluster",
			Handler:    _Cluster_ResumeCluster_Handler,
		},
		{
			MethodName: "CreateBackup",
			Handler:    _Cluster_CreateBackup_Handler,
		},
		{
			MethodName: "CreateRestore",
			Handler:    _Cluster_CreateRestore_Handler,
		},
		{
			MethodName: "GetBackup",
			Handler:    _Cluster_GetBackup_Handler,
		},
		{
			MethodName: "GetRestore",
			Handler:    _Cluster_GetRestore_Handler,
		},
		{
			MethodName: "StopBackup",
			Handler:    _Cluster_StopBackup_Handler,
		},
		{
			MethodName: "StopRestore",
			Handler:    _Cluster_StopRestore_Handler,
		},
		{
			MethodName: "DeleteBackup",
			Handler:    _Cluster_DeleteBackup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/service.proto",
}
