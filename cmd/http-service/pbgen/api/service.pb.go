// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: api/service.proto

package api

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu     uint32  `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory  uint32  `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Storage *uint32 `protobuf:"varint,3,opt,name=storage,proto3,oneof" json:"storage,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{1}
}

func (x *Resource) GetCpu() uint32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *Resource) GetMemory() uint32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Resource) GetStorage() uint32 {
	if x != nil && x.Storage != nil {
		return *x.Storage
	}
	return 0
}

type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replicas uint32                     `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	Resource *Resource                  `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Config   map[string]*structpb.Value `protobuf:"bytes,3,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Port     *uint32                    `protobuf:"varint,4,opt,name=port,proto3,oneof" json:"port,omitempty"`
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{2}
}

func (x *Component) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *Component) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Component) GetConfig() map[string]*structpb.Value {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Component) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

// extension for TiFlash as TiFlash with another learner config field.
type TiFlashComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replicas      uint32                     `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	Resource      *Resource                  `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Config        map[string]*structpb.Value `protobuf:"bytes,3,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LearnerConfig map[string]*structpb.Value `protobuf:"bytes,4,rep,name=learner_config,json=learnerConfig,proto3" json:"learner_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Port          *uint32                    `protobuf:"varint,5,opt,name=port,proto3,oneof" json:"port,omitempty"`
}

func (x *TiFlashComponent) Reset() {
	*x = TiFlashComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TiFlashComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TiFlashComponent) ProtoMessage() {}

func (x *TiFlashComponent) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TiFlashComponent.ProtoReflect.Descriptor instead.
func (*TiFlashComponent) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{3}
}

func (x *TiFlashComponent) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *TiFlashComponent) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *TiFlashComponent) GetConfig() map[string]*structpb.Value {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TiFlashComponent) GetLearnerConfig() map[string]*structpb.Value {
	if x != nil {
		return x.LearnerConfig
	}
	return nil
}

func (x *TiFlashComponent) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

type Prometheus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        string    `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Resource       *Resource `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	CommandOptions []string  `protobuf:"bytes,3,rep,name=command_options,json=commandOptions,proto3" json:"command_options,omitempty"`
}

func (x *Prometheus) Reset() {
	*x = Prometheus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prometheus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prometheus) ProtoMessage() {}

func (x *Prometheus) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prometheus.ProtoReflect.Descriptor instead.
func (*Prometheus) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{4}
}

func (x *Prometheus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Prometheus) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Prometheus) GetCommandOptions() []string {
	if x != nil {
		return x.CommandOptions
	}
	return nil
}

type Grafana struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  string            `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Resource *Resource         `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Envs     map[string]string `protobuf:"bytes,3,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Port     *uint32           `protobuf:"varint,4,opt,name=port,proto3,oneof" json:"port,omitempty"`
}

func (x *Grafana) Reset() {
	*x = Grafana{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grafana) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grafana) ProtoMessage() {}

func (x *Grafana) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grafana.ProtoReflect.Descriptor instead.
func (*Grafana) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{5}
}

func (x *Grafana) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Grafana) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Grafana) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *Grafana) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

type CreateClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId  string            `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Version    string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	User       *User             `protobuf:"bytes,3,opt,name=user,proto3,oneof" json:"user,omitempty"`
	Pd         *Component        `protobuf:"bytes,4,opt,name=pd,proto3" json:"pd,omitempty"`
	Tikv       *Component        `protobuf:"bytes,5,opt,name=tikv,proto3" json:"tikv,omitempty"`
	Tiflash    *TiFlashComponent `protobuf:"bytes,6,opt,name=tiflash,proto3,oneof" json:"tiflash,omitempty"`
	Tidb       *Component        `protobuf:"bytes,7,opt,name=tidb,proto3" json:"tidb,omitempty"`
	Prometheus *Prometheus       `protobuf:"bytes,8,opt,name=prometheus,proto3,oneof" json:"prometheus,omitempty"`
	Grafana    *Grafana          `protobuf:"bytes,9,opt,name=grafana,proto3,oneof" json:"grafana,omitempty"`
}

func (x *CreateClusterReq) Reset() {
	*x = CreateClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterReq) ProtoMessage() {}

func (x *CreateClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterReq.ProtoReflect.Descriptor instead.
func (*CreateClusterReq) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{6}
}

func (x *CreateClusterReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateClusterReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateClusterReq) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CreateClusterReq) GetPd() *Component {
	if x != nil {
		return x.Pd
	}
	return nil
}

func (x *CreateClusterReq) GetTikv() *Component {
	if x != nil {
		return x.Tikv
	}
	return nil
}

func (x *CreateClusterReq) GetTiflash() *TiFlashComponent {
	if x != nil {
		return x.Tiflash
	}
	return nil
}

func (x *CreateClusterReq) GetTidb() *Component {
	if x != nil {
		return x.Tidb
	}
	return nil
}

func (x *CreateClusterReq) GetPrometheus() *Prometheus {
	if x != nil {
		return x.Prometheus
	}
	return nil
}

func (x *CreateClusterReq) GetGrafana() *Grafana {
	if x != nil {
		return x.Grafana
	}
	return nil
}

type CreateClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *CreateClusterResp) Reset() {
	*x = CreateClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterResp) ProtoMessage() {}

func (x *CreateClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterResp.ProtoReflect.Descriptor instead.
func (*CreateClusterResp) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{7}
}

func (x *CreateClusterResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateClusterResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type GetClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *GetClusterReq) Reset() {
	*x = GetClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterReq) ProtoMessage() {}

func (x *GetClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterReq.ProtoReflect.Descriptor instead.
func (*GetClusterReq) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetClusterReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type GetClusterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool         `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message *string      `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Data    *ClusterInfo `protobuf:"bytes,3,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *GetClusterResp) Reset() {
	*x = GetClusterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterResp) ProtoMessage() {}

func (x *GetClusterResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterResp.ProtoReflect.Descriptor instead.
func (*GetClusterResp) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetClusterResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetClusterResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetClusterResp) GetData() *ClusterInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId  string            `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Version    string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Status     string            `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Pd         *PDStatus         `protobuf:"bytes,4,opt,name=pd,proto3" json:"pd,omitempty"`
	Tikv       *TiKVStatus       `protobuf:"bytes,5,opt,name=tikv,proto3" json:"tikv,omitempty"`
	Tiflash    *TiFlashStatus    `protobuf:"bytes,6,opt,name=tiflash,proto3,oneof" json:"tiflash,omitempty"`
	Tidb       *TiDBStatus       `protobuf:"bytes,7,opt,name=tidb,proto3" json:"tidb,omitempty"`
	Prometheus *PrometheusStatus `protobuf:"bytes,8,opt,name=prometheus,proto3,oneof" json:"prometheus,omitempty"`
	Grafana    *GrafanaStatus    `protobuf:"bytes,9,opt,name=grafana,proto3,oneof" json:"grafana,omitempty"`
}

func (x *ClusterInfo) Reset() {
	*x = ClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfo) ProtoMessage() {}

func (x *ClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfo.ProtoReflect.Descriptor instead.
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{10}
}

func (x *ClusterInfo) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClusterInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClusterInfo) GetPd() *PDStatus {
	if x != nil {
		return x.Pd
	}
	return nil
}

func (x *ClusterInfo) GetTikv() *TiKVStatus {
	if x != nil {
		return x.Tikv
	}
	return nil
}

func (x *ClusterInfo) GetTiflash() *TiFlashStatus {
	if x != nil {
		return x.Tiflash
	}
	return nil
}

func (x *ClusterInfo) GetTidb() *TiDBStatus {
	if x != nil {
		return x.Tidb
	}
	return nil
}

func (x *ClusterInfo) GetPrometheus() *PrometheusStatus {
	if x != nil {
		return x.Prometheus
	}
	return nil
}

func (x *ClusterInfo) GetGrafana() *GrafanaStatus {
	if x != nil {
		return x.Grafana
	}
	return nil
}

type PDStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase    string                     `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	Replicas uint32                     `protobuf:"varint,2,opt,name=replicas,proto3" json:"replicas,omitempty"`
	Resource *Resource                  `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	Config   map[string]*structpb.Value `protobuf:"bytes,4,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Members  []*PDMember                `protobuf:"bytes,5,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *PDStatus) Reset() {
	*x = PDStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDStatus) ProtoMessage() {}

func (x *PDStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDStatus.ProtoReflect.Descriptor instead.
func (*PDStatus) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{11}
}

func (x *PDStatus) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *PDStatus) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *PDStatus) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *PDStatus) GetConfig() map[string]*structpb.Value {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *PDStatus) GetMembers() []*PDMember {
	if x != nil {
		return x.Members
	}
	return nil
}

type PDMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id        uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Health    bool   `protobuf:"varint,4,opt,name=health,proto3" json:"health,omitempty"`
}

func (x *PDMember) Reset() {
	*x = PDMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDMember) ProtoMessage() {}

func (x *PDMember) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDMember.ProtoReflect.Descriptor instead.
func (*PDMember) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{12}
}

func (x *PDMember) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PDMember) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PDMember) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *PDMember) GetHealth() bool {
	if x != nil {
		return x.Health
	}
	return false
}

type TiKVStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase    string                     `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	Replicas uint32                     `protobuf:"varint,2,opt,name=replicas,proto3" json:"replicas,omitempty"`
	Resource *Resource                  `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	Config   map[string]*structpb.Value `protobuf:"bytes,4,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Members  []*TiKVMember              `protobuf:"bytes,5,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *TiKVStatus) Reset() {
	*x = TiKVStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TiKVStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TiKVStatus) ProtoMessage() {}

func (x *TiKVStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TiKVStatus.ProtoReflect.Descriptor instead.
func (*TiKVStatus) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{13}
}

func (x *TiKVStatus) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *TiKVStatus) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *TiKVStatus) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *TiKVStatus) GetConfig() map[string]*structpb.Value {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TiKVStatus) GetMembers() []*TiKVMember {
	if x != nil {
		return x.Members
	}
	return nil
}

type TiKVMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id        uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	State     string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TiKVMember) Reset() {
	*x = TiKVMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TiKVMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TiKVMember) ProtoMessage() {}

func (x *TiKVMember) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TiKVMember.ProtoReflect.Descriptor instead.
func (*TiKVMember) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{14}
}

func (x *TiKVMember) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TiKVMember) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TiKVMember) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *TiKVMember) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type TiFlashStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase         string                     `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	Replicas      uint32                     `protobuf:"varint,2,opt,name=replicas,proto3" json:"replicas,omitempty"`
	Resource      *Resource                  `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	Config        map[string]*structpb.Value `protobuf:"bytes,4,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LearnerConfig map[string]*structpb.Value `protobuf:"bytes,5,rep,name=learner_config,json=learnerConfig,proto3" json:"learner_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Members       []*TiFlashMember           `protobuf:"bytes,6,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *TiFlashStatus) Reset() {
	*x = TiFlashStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TiFlashStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TiFlashStatus) ProtoMessage() {}

func (x *TiFlashStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TiFlashStatus.ProtoReflect.Descriptor instead.
func (*TiFlashStatus) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{15}
}

func (x *TiFlashStatus) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *TiFlashStatus) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *TiFlashStatus) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *TiFlashStatus) GetConfig() map[string]*structpb.Value {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TiFlashStatus) GetLearnerConfig() map[string]*structpb.Value {
	if x != nil {
		return x.LearnerConfig
	}
	return nil
}

func (x *TiFlashStatus) GetMembers() []*TiFlashMember {
	if x != nil {
		return x.Members
	}
	return nil
}

type TiFlashMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id        uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	State     string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TiFlashMember) Reset() {
	*x = TiFlashMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TiFlashMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TiFlashMember) ProtoMessage() {}

func (x *TiFlashMember) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TiFlashMember.ProtoReflect.Descriptor instead.
func (*TiFlashMember) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{16}
}

func (x *TiFlashMember) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TiFlashMember) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TiFlashMember) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *TiFlashMember) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type TiDBStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase    string                     `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	Replicas uint32                     `protobuf:"varint,2,opt,name=replicas,proto3" json:"replicas,omitempty"`
	Resource *Resource                  `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	Config   map[string]*structpb.Value `protobuf:"bytes,4,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Host     string                     `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	Port     uint32                     `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	Members  []*TiDBMember              `protobuf:"bytes,7,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *TiDBStatus) Reset() {
	*x = TiDBStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TiDBStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TiDBStatus) ProtoMessage() {}

func (x *TiDBStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TiDBStatus.ProtoReflect.Descriptor instead.
func (*TiDBStatus) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{17}
}

func (x *TiDBStatus) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *TiDBStatus) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *TiDBStatus) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *TiDBStatus) GetConfig() map[string]*structpb.Value {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TiDBStatus) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TiDBStatus) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TiDBStatus) GetMembers() []*TiDBMember {
	if x != nil {
		return x.Members
	}
	return nil
}

type TiDBMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StartTime string `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Health    bool   `protobuf:"varint,3,opt,name=health,proto3" json:"health,omitempty"`
}

func (x *TiDBMember) Reset() {
	*x = TiDBMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TiDBMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TiDBMember) ProtoMessage() {}

func (x *TiDBMember) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TiDBMember.ProtoReflect.Descriptor instead.
func (*TiDBMember) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{18}
}

func (x *TiDBMember) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TiDBMember) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *TiDBMember) GetHealth() bool {
	if x != nil {
		return x.Health
	}
	return false
}

type PrometheusStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        string    `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Resource       *Resource `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	CommandOptions []string  `protobuf:"bytes,3,rep,name=command_options,json=commandOptions,proto3" json:"command_options,omitempty"`
}

func (x *PrometheusStatus) Reset() {
	*x = PrometheusStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrometheusStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrometheusStatus) ProtoMessage() {}

func (x *PrometheusStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrometheusStatus.ProtoReflect.Descriptor instead.
func (*PrometheusStatus) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{19}
}

func (x *PrometheusStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PrometheusStatus) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *PrometheusStatus) GetCommandOptions() []string {
	if x != nil {
		return x.CommandOptions
	}
	return nil
}

type GrafanaStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  string            `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Resource *Resource         `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Envs     map[string]string `protobuf:"bytes,3,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Host     string            `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	Port     uint32            `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *GrafanaStatus) Reset() {
	*x = GrafanaStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrafanaStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrafanaStatus) ProtoMessage() {}

func (x *GrafanaStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrafanaStatus.ProtoReflect.Descriptor instead.
func (*GrafanaStatus) Descriptor() ([]byte, []int) {
	return file_api_service_proto_rawDescGZIP(), []int{20}
}

func (x *GrafanaStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GrafanaStatus) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *GrafanaStatus) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *GrafanaStatus) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GrafanaStatus) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

var File_api_service_proto protoreflect.FileDescriptor

var file_api_service_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x45, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x29, 0x92, 0x41, 0x26, 0x32, 0x1c, 0x54, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4a, 0x06, 0x22, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x1c, 0x54, 0x68, 0x65,
	0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x08, 0x22, 0x31, 0x32, 0x33, 0x34,
	0x35, 0x36, 0x22, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x51, 0x92,
	0x41, 0x4e, 0x0a, 0x4c, 0x2a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x32, 0x31, 0x55, 0x73, 0x65, 0x72,
	0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0xd2, 0x01, 0x10,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x8e, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x43, 0x0a,
	0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32,
	0x29, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x43,
	0x50, 0x55, 0x20, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63,
	0x68, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x2e, 0x4a, 0x01, 0x32, 0x52, 0x03, 0x63,
	0x70, 0x75, 0x12, 0x4f, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x2f, 0x54, 0x68, 0x65, 0x20, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x2e, 0x20,
	0x75, 0x6e, 0x69, 0x74, 0x3a, 0x20, 0x47, 0x69, 0x4a, 0x01, 0x34, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x85, 0x01, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x66, 0x92, 0x41, 0x63, 0x32, 0x5c, 0x54, 0x68, 0x65, 0x20,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x2e, 0x20, 0x75, 0x6e, 0x69, 0x74, 0x3a, 0x20, 0x47, 0x69, 0x2e, 0x20, 0x54, 0x68,
	0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x50,
	0x44, 0x2c, 0x20, 0x54, 0x69, 0x4b, 0x56, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x54, 0x69, 0x46, 0x6c,
	0x61, 0x73, 0x68, 0x20, 0x6e, 0x6f, 0x77, 0x2e, 0x4a, 0x03, 0x31, 0x30, 0x30, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x58, 0x92, 0x41, 0x55,
	0x0a, 0x53, 0x2a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x32, 0x3b, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68,
	0x20, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x2e, 0xd2, 0x01, 0x09, 0x63, 0x70, 0x75, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x22, 0x9d, 0x04, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12,
	0x4c, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x28, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x4a, 0x01, 0x33, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x5f, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x34,
	0x92, 0x41, 0x31, 0x32, 0x2f, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x2e, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x62,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32,
	0x29, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x4a, 0x53,
	0x4f, 0x4e, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x50, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x32, 0x54, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x20, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x54, 0x69, 0x44, 0x42, 0x20, 0x6e, 0x6f, 0x77, 0x2e, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x51, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x4f, 0x92, 0x41, 0x4c, 0x0a, 0x4a, 0x2a, 0x09,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x32, 0x2a, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0xd2, 0x01, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0x97, 0x06, 0x0a, 0x10, 0x54, 0x69, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x28, 0x54,
	0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x01, 0x33, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x12, 0x5f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x54, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61,
	0x63, 0x68, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x2e, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x46, 0x6c,
	0x61, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29, 0x54,
	0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x4a, 0x53, 0x4f, 0x4e,
	0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x8f, 0x01, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x54, 0x69, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x54, 0x68, 0x65, 0x20, 0x54, 0x69,
	0x46, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x4a, 0x53, 0x4f, 0x4e, 0x20, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x2e, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x50, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x32, 0x54, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x20, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x54, 0x69, 0x44, 0x42, 0x20, 0x6e, 0x6f, 0x77, 0x2e, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x51, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x3a, 0x4f, 0x92, 0x41, 0x4c, 0x0a, 0x4a, 0x2a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x32, 0x2a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x69,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0xd2,
	0x01, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x84, 0x03, 0x0a, 0x0a,
	0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x12, 0x72, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0x92, 0x41, 0x55,
	0x32, 0x48, 0x54, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x2e,
	0x20, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x6e, 0x6f, 0x77, 0x2e, 0x4a, 0x09, 0x22, 0x76, 0x32, 0x2e,
	0x32, 0x37, 0x2e, 0x31, 0x22, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x24, 0x92, 0x41, 0x21, 0x32, 0x1f, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x65, 0x75, 0x73, 0x2e, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x54, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0x54,
	0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x65, 0x75, 0x73, 0x2e, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x5b, 0x92, 0x41, 0x58, 0x0a, 0x56, 0x2a, 0x0a, 0x50, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x32, 0x36, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x65, 0x75, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0xd2, 0x01, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0xf1, 0x03, 0x0a, 0x07, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x12, 0x6e,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x54, 0x92, 0x41, 0x51, 0x32, 0x45, 0x54, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61,
	0x2e, 0x20, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x20,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x6e, 0x6f, 0x77, 0x2e, 0x4a, 0x08, 0x22, 0x37, 0x2e,
	0x35, 0x2e, 0x31, 0x31, 0x22, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e,
	0x61, 0x2e, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x04,
	0x65, 0x6e, 0x76, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2e, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29, 0x54, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e,
	0x61, 0x2e, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x54, 0x68, 0x65,
	0x20, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x72, 0x61,
	0x66, 0x61, 0x6e, 0x61, 0x2e, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x1a, 0x37, 0x0a, 0x09, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x52, 0x92, 0x41, 0x4f, 0x0a, 0x4d,
	0x2a, 0x07, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x32, 0x30, 0x47, 0x72, 0x61, 0x66, 0x61,
	0x6e, 0x61, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e,
	0x61, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0xd2, 0x01, 0x0f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xd9, 0x07, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x5d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3e, 0x92, 0x41, 0x3b, 0x32, 0x25, 0x54, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x20, 0x49, 0x44, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x12, 0x22, 0x74, 0x69,
	0x64, 0x62, 0x2d, 0x63, 0x6c, 0x73, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x31, 0x32, 0x33, 0x22, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x56,
	0x32, 0x4a, 0x54, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x44, 0x42, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x20, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x6e, 0x6f, 0x77, 0x2e, 0x4a, 0x08, 0x22, 0x76,
	0x37, 0x2e, 0x31, 0x2e, 0x31, 0x22, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x52, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29, 0x54,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x02, 0x70, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42,
	0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x54, 0x68, 0x65, 0x20, 0x50, 0x44, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x02, 0x70, 0x64, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x69,
	0x6b, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x54,
	0x68, 0x65, 0x20, 0x54, 0x69, 0x4b, 0x56, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x04, 0x74, 0x69, 0x6b, 0x76, 0x12, 0x60, 0x0a, 0x07, 0x74, 0x69, 0x66, 0x6c, 0x61,
	0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x69, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42,
	0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0x54, 0x68, 0x65, 0x20, 0x54, 0x69, 0x46, 0x6c, 0x61, 0x73,
	0x68, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x01, 0x52, 0x07, 0x74,
	0x69, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x69, 0x64,
	0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x54, 0x68,
	0x65, 0x20, 0x54, 0x69, 0x44, 0x42, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x04, 0x74, 0x69, 0x64, 0x62, 0x12, 0x63, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x65, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x42, 0x2d, 0x92, 0x41, 0x2a,
	0x32, 0x28, 0x54, 0x68, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x07, 0x67,
	0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32,
	0x25, 0x54, 0x68, 0x65, 0x20, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x03, 0x52, 0x07, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e,
	0x61, 0x88, 0x01, 0x01, 0x3a, 0x6c, 0x92, 0x41, 0x69, 0x0a, 0x67, 0x2a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x32, 0x35, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x20,
	0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0xd2, 0x01, 0x1b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x70, 0x64, 0x74, 0x69, 0x6b, 0x76, 0x74, 0x69,
	0x64, 0x62, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x74, 0x69, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x67, 0x72, 0x61, 0x66, 0x61,
	0x6e, 0x61, 0x22, 0xfd, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x22,
	0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x2e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x40, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x3a, 0x51, 0x92, 0x41, 0x4e, 0x0a, 0x4c, 0x2a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x32, 0x37, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x5d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x25, 0x54,
	0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x72, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4a, 0x12, 0x22, 0x74, 0x69, 0x64, 0x62, 0x2d, 0x63, 0x6c, 0x73, 0x75,
	0x74, 0x65, 0x72, 0x2d, 0x31, 0x32, 0x33, 0x22, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a, 0x0d, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x32, 0x31, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0xd2, 0x01, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xcd, 0x02, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2d, 0x92,
	0x41, 0x2a, 0x32, 0x22, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x2e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x54, 0x68, 0x65,
	0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1f, 0x54, 0x68,
	0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x01, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x3a, 0x4a, 0x92, 0x41, 0x47, 0x0a, 0x45, 0x2a,
	0x0e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x32,
	0x33, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x20,
	0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf9, 0x07, 0x0a, 0x0b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0x92,
	0x41, 0x3b, 0x32, 0x25, 0x54, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x49,
	0x44, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x12, 0x22, 0x74, 0x69, 0x64, 0x62,
	0x2d, 0x63, 0x6c, 0x73, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x31, 0x32, 0x33, 0x22, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x20,
	0x54, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x54, 0x69, 0x44, 0x42, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4a, 0x08, 0x22, 0x76, 0x37, 0x2e, 0x31, 0x2e, 0x31, 0x22, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0xa5, 0x01, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x8c, 0x01, 0x92, 0x41, 0x88, 0x01, 0x32, 0x7b, 0x54, 0x68, 0x65,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54,
	0x69, 0x44, 0x42, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x20, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x22, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x2c, 0x20, 0x22, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x22, 0x2c, 0x20, 0x22, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x2c, 0x20, 0x22,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x2c, 0x20, 0x22, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x22, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x22, 0x75, 0x6e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x2e, 0x4a, 0x09, 0x22, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x22, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x02, 0x70,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x44,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x54, 0x68, 0x65,
	0x20, 0x50, 0x44, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x02, 0x70,
	0x64, 0x12, 0x4c, 0x0a, 0x04, 0x74, 0x69, 0x6b, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x4b, 0x56, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x54, 0x68, 0x65, 0x20, 0x54, 0x69, 0x4b, 0x56, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x04, 0x74, 0x69, 0x6b, 0x76, 0x12,
	0x5d, 0x0a, 0x07, 0x74, 0x69, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0x54, 0x68, 0x65, 0x20, 0x54,
	0x69, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x4c,
	0x0a, 0x04, 0x74, 0x69, 0x64, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x54, 0x69, 0x44, 0x42, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x27, 0x92,
	0x41, 0x24, 0x32, 0x22, 0x54, 0x68, 0x65, 0x20, 0x54, 0x69, 0x44, 0x42, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x04, 0x74, 0x69, 0x64, 0x62, 0x12, 0x69, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x54, 0x68,
	0x65, 0x20, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x65, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x66, 0x61,
	0x6e, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x2a, 0x92, 0x41,
	0x27, 0x32, 0x25, 0x54, 0x68, 0x65, 0x20, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x02, 0x52, 0x07, 0x67, 0x72, 0x61, 0x66,
	0x61, 0x6e, 0x61, 0x88, 0x01, 0x01, 0x3a, 0x66, 0x92, 0x41, 0x63, 0x0a, 0x61, 0x2a, 0x0b, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0xd2, 0x01, 0x21, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x70, 0x64, 0x74, 0x69, 0x6b, 0x76, 0x74, 0x69, 0x64, 0x62, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x74, 0x69, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x67, 0x72,
	0x61, 0x66, 0x61, 0x6e, 0x61, 0x22, 0x9a, 0x05, 0x0a, 0x08, 0x50, 0x44, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x73, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x5d, 0x92, 0x41, 0x5a, 0x32, 0x4e, 0x54, 0x68, 0x65, 0x20, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x44, 0x20, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x22, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x22, 0x2c, 0x20,
	0x22, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x22, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x22, 0x2e, 0x4a, 0x08, 0x22, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x22,
	0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x2b,
	0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x44,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x01, 0x33, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x62, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x32,
	0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x50, 0x44, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x2e, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x44, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x54, 0x68,
	0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x50, 0x44, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x4a, 0x53,
	0x4f, 0x4e, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x4e, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x44, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x44, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x1a, 0x51, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x5b, 0x92, 0x41, 0x58, 0x0a, 0x56, 0x2a, 0x08, 0x50, 0x44,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x2b, 0x50, 0x44, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x44, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0xd2, 0x01, 0x1c, 0x70, 0x68, 0x61, 0x73, 0x65, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x22, 0x82, 0x03, 0x0a, 0x08, 0x50, 0x44, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92,
	0x41, 0x24, 0x32, 0x1a, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x50, 0x44, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4a, 0x06,
	0x22, 0x70, 0x64, 0x2d, 0x30, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x18, 0x54,
	0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x44, 0x20,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4a, 0x03, 0x31, 0x32, 0x33, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x63, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x92, 0x41, 0x41, 0x32, 0x27, 0x54, 0x68, 0x65, 0x20, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x44, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x33, 0x2d, 0x31, 0x31, 0x2d, 0x30, 0x31, 0x54,
	0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x21, 0x57, 0x68, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x44, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x20, 0x69, 0x73, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x2e, 0x4a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x3a, 0x5a, 0x92, 0x41, 0x57,
	0x0a, 0x55, 0x2a, 0x08, 0x50, 0x44, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x32, 0x30, 0x50, 0x44,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x50, 0x44, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0xd2, 0x01,
	0x16, 0x6e, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0xb0, 0x05, 0x0a, 0x0a, 0x54, 0x69, 0x4b, 0x56,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x75, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5f, 0x92, 0x41, 0x5c, 0x32, 0x50, 0x54, 0x68, 0x65, 0x20,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x4b,
	0x56, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x22, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x22, 0x2c, 0x20, 0x22, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x22, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x2e, 0x4a, 0x08, 0x22, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x22, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x51, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x35, 0x92, 0x41, 0x32, 0x32, 0x2d, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x4b, 0x56, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x4a, 0x01, 0x33, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x12, 0x64, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x34, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x4b, 0x56,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65,
	0x61, 0x63, 0x68, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x2e, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x4b,
	0x56, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x2e, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x4b, 0x56,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x4a, 0x53, 0x4f, 0x4e,
	0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x52, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x4b, 0x56, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x4b, 0x56,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x1a, 0x51, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x61, 0x92, 0x41, 0x5e, 0x0a, 0x5c, 0x2a, 0x0a,
	0x54, 0x69, 0x4b, 0x56, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x2f, 0x54, 0x69, 0x4b, 0x56,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x4b, 0x56,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0xd2, 0x01, 0x1c, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x8b, 0x03, 0x0a, 0x0a, 0x54,
	0x69, 0x4b, 0x56, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x1c, 0x54, 0x68,
	0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69,
	0x4b, 0x56, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4a, 0x08, 0x22, 0x74, 0x69, 0x6b,
	0x76, 0x2d, 0x30, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1a, 0x54, 0x68, 0x65,
	0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x4b, 0x56, 0x20,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4a, 0x03, 0x31, 0x32, 0x33, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x65, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x43, 0x32, 0x29, 0x54, 0x68, 0x65, 0x20, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x4b, 0x56, 0x20, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x33, 0x2d, 0x31, 0x31, 0x2d, 0x30,
	0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x1d, 0x54, 0x68, 0x65,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69,
	0x4b, 0x56, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4a, 0x04, 0x22, 0x55, 0x70, 0x22,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x5f, 0x92, 0x41, 0x5c, 0x0a, 0x5a, 0x2a, 0x0a,
	0x54, 0x69, 0x4b, 0x56, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x32, 0x34, 0x54, 0x69, 0x4b, 0x56,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x54, 0x69, 0x4b, 0x56, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0xd2, 0x01, 0x15, 0x6e, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xc2, 0x07, 0x0a, 0x0d, 0x54, 0x69, 0x46,
	0x6c, 0x61, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x78, 0x0a, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x62, 0x92, 0x41, 0x5f, 0x32, 0x53,
	0x54, 0x68, 0x65, 0x20, 0x70, 0x68, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x54, 0x69, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x20, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x20, 0x22, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x22, 0x2c, 0x20, 0x22, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x22, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x22, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x22, 0x2e, 0x4a, 0x08, 0x22, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x22, 0x52, 0x05, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x30, 0x54, 0x68, 0x65,
	0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x46, 0x6c, 0x61,
	0x73, 0x68, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x01, 0x32,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x67, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x3c, 0x92, 0x41, 0x39,
	0x32, 0x37, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68,
	0x20, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x2e, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x46, 0x6c, 0x61, 0x73,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x31, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x46, 0x6c,
	0x61, 0x73, 0x68, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x4a,
	0x53, 0x4f, 0x4e, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x94, 0x01, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x54, 0x69, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x46, 0x92, 0x41, 0x43, 0x32, 0x41, 0x54, 0x68, 0x65, 0x20, 0x54, 0x69,
	0x46, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x46, 0x6c,
	0x61, 0x73, 0x68, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x4a,
	0x53, 0x4f, 0x4e, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x52, 0x0d, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x69, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x46, 0x6c, 0x61, 0x73, 0x68,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x1a, 0x51, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x3a, 0x6a, 0x92, 0x41, 0x67, 0x0a, 0x65, 0x2a, 0x0d, 0x54, 0x69, 0x46, 0x6c, 0x61, 0x73,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x35, 0x54, 0x69, 0x46, 0x6c, 0x61, 0x73, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x46, 0x6c,
	0x61, 0x73, 0x68, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0xd2, 0x01,
	0x1c, 0x70, 0x68, 0x61, 0x73, 0x65, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xa6, 0x03,
	0x0a, 0x0d, 0x54, 0x69, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x45, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92,
	0x41, 0x2e, 0x32, 0x1f, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x4a, 0x0b, 0x22, 0x74, 0x69, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x2d, 0x30, 0x22,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x1d, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4a, 0x03, 0x31, 0x32, 0x33, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x68, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x49, 0x92, 0x41, 0x46, 0x32, 0x2c, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x33, 0x2d, 0x31, 0x31,
	0x2d, 0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x20, 0x54,
	0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x54, 0x69, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4a,
	0x04, 0x22, 0x55, 0x70, 0x22, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x68, 0x92, 0x41,
	0x65, 0x0a, 0x63, 0x2a, 0x0d, 0x54, 0x69, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x32, 0x3a, 0x54, 0x69, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x46, 0x6c,
	0x61, 0x73, 0x68, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0xd2, 0x01,
	0x15, 0x6e, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xc6, 0x06, 0x0a, 0x0a, 0x54, 0x69, 0x44, 0x42, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x75, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x5f, 0x92, 0x41, 0x5c, 0x32, 0x50, 0x54, 0x68, 0x65, 0x20, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x44, 0x42,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x22, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x22, 0x2c, 0x20, 0x22, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x22, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x2e, 0x4a, 0x08, 0x22, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x22, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x35,
	0x92, 0x41, 0x32, 0x32, 0x2d, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x54, 0x69, 0x44, 0x42, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x4a, 0x01, 0x31, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12,
	0x64, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x34, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x44, 0x42, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61,
	0x63, 0x68, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x2e, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x44, 0x42,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x2e, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x44, 0x42, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x4a, 0x53, 0x4f, 0x4e, 0x20,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x4c, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92,
	0x41, 0x35, 0x32, 0x33, 0x54, 0x68, 0x65, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x28, 0x49, 0x50,
	0x20, 0x6f, 0x72, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x29,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x44, 0x42, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2a, 0x92, 0x41, 0x27,
	0x32, 0x1f, 0x54, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x54, 0x69, 0x44, 0x42, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x4a, 0x04, 0x34, 0x30, 0x30, 0x30, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x52, 0x0a,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x44, 0x42, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x44, 0x42, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x1a, 0x51, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x3a, 0x69, 0x92, 0x41, 0x66, 0x0a, 0x64, 0x2a, 0x0a, 0x54, 0x69, 0x44,
	0x42, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x2f, 0x54, 0x69, 0x44, 0x42, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x44, 0x42, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0xd2, 0x01, 0x24, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x68, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x72, 0x74, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22,
	0xdc, 0x02, 0x0a, 0x0a, 0x54, 0x69, 0x44, 0x42, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41,
	0x28, 0x32, 0x1c, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x54, 0x69, 0x44, 0x42, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4a,
	0x08, 0x22, 0x74, 0x69, 0x64, 0x62, 0x2d, 0x30, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x65, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x43, 0x32, 0x29, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x44, 0x42, 0x20, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x33, 0x2d, 0x31, 0x31, 0x2d, 0x30, 0x31,
	0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x23, 0x57, 0x68, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x44, 0x42, 0x20, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x2e,
	0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x3a, 0x5e,
	0x92, 0x41, 0x5b, 0x0a, 0x59, 0x2a, 0x0a, 0x54, 0x69, 0x44, 0x42, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x32, 0x34, 0x54, 0x69, 0x44, 0x42, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x69, 0x73,
	0x20, 0x61, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x44, 0x42, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0xd2, 0x01, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0x89,
	0x03, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x28, 0x54, 0x68, 0x65, 0x20, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x4a, 0x09, 0x22, 0x76, 0x32, 0x2e, 0x32, 0x37, 0x2e, 0x31, 0x22, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29, 0x54,
	0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x32,
	0x32, 0x30, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x66, 0x92, 0x41, 0x63, 0x0a, 0x61, 0x2a, 0x10, 0x50, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x65, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x3b, 0x50, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x69, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0xd2, 0x01, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xd7, 0x04, 0x0a, 0x0d, 0x47,
	0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92,
	0x41, 0x31, 0x32, 0x25, 0x54, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x08, 0x22, 0x37, 0x2e, 0x35, 0x2e,
	0x31, 0x31, 0x22, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x2b, 0x92,
	0x41, 0x28, 0x32, 0x26, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x33, 0x54, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73,
	0x12, 0x4f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b,
	0x92, 0x41, 0x38, 0x32, 0x36, 0x54, 0x68, 0x65, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x28, 0x49,
	0x50, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x29, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x2d, 0x92, 0x41, 0x2a, 0x32, 0x22, 0x54, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x04, 0x33, 0x30, 0x30, 0x30, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x1a, 0x37, 0x0a, 0x09, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x65, 0x92,
	0x41, 0x62, 0x0a, 0x60, 0x2a, 0x0d, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x32, 0x35, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0xd2, 0x01, 0x17, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x68, 0x6f, 0x73, 0x74,
	0x70, 0x6f, 0x72, 0x74, 0x32, 0xbe, 0x02, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x80, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x40, 0x92, 0x41, 0x22, 0x12, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61,
	0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x2a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01,
	0x2a, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x7b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x44, 0x92, 0x41, 0x1c, 0x12,
	0x0e, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x2a,
	0x0a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x1a, 0x33, 0x92, 0x41, 0x30, 0x12, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x67,
	0x65, 0x74, 0x2c, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x54, 0x69, 0x44, 0x42, 0x20, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x42, 0x78, 0x92, 0x41, 0x3e, 0x12, 0x3c, 0x0a, 0x11, 0x54, 0x69,
	0x44, 0x42, 0x20, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x41, 0x50, 0x49, 0x12,
	0x1e, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x69, 0x44,
	0x42, 0x20, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x41, 0x50, 0x49, 0x2e, 0x32,
	0x07, 0x76, 0x31, 0x2d, 0x62, 0x65, 0x74, 0x61, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2f, 0x74, 0x69, 0x64,
	0x62, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x61, 0x70, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_service_proto_rawDescOnce sync.Once
	file_api_service_proto_rawDescData = file_api_service_proto_rawDesc
)

func file_api_service_proto_rawDescGZIP() []byte {
	file_api_service_proto_rawDescOnce.Do(func() {
		file_api_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_service_proto_rawDescData)
	})
	return file_api_service_proto_rawDescData
}

var file_api_service_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_api_service_proto_goTypes = []interface{}{
	(*User)(nil),              // 0: api.User
	(*Resource)(nil),          // 1: api.Resource
	(*Component)(nil),         // 2: api.Component
	(*TiFlashComponent)(nil),  // 3: api.TiFlashComponent
	(*Prometheus)(nil),        // 4: api.Prometheus
	(*Grafana)(nil),           // 5: api.Grafana
	(*CreateClusterReq)(nil),  // 6: api.CreateClusterReq
	(*CreateClusterResp)(nil), // 7: api.CreateClusterResp
	(*GetClusterReq)(nil),     // 8: api.GetClusterReq
	(*GetClusterResp)(nil),    // 9: api.GetClusterResp
	(*ClusterInfo)(nil),       // 10: api.ClusterInfo
	(*PDStatus)(nil),          // 11: api.PDStatus
	(*PDMember)(nil),          // 12: api.PDMember
	(*TiKVStatus)(nil),        // 13: api.TiKVStatus
	(*TiKVMember)(nil),        // 14: api.TiKVMember
	(*TiFlashStatus)(nil),     // 15: api.TiFlashStatus
	(*TiFlashMember)(nil),     // 16: api.TiFlashMember
	(*TiDBStatus)(nil),        // 17: api.TiDBStatus
	(*TiDBMember)(nil),        // 18: api.TiDBMember
	(*PrometheusStatus)(nil),  // 19: api.PrometheusStatus
	(*GrafanaStatus)(nil),     // 20: api.GrafanaStatus
	nil,                       // 21: api.Component.ConfigEntry
	nil,                       // 22: api.TiFlashComponent.ConfigEntry
	nil,                       // 23: api.TiFlashComponent.LearnerConfigEntry
	nil,                       // 24: api.Grafana.EnvsEntry
	nil,                       // 25: api.PDStatus.ConfigEntry
	nil,                       // 26: api.TiKVStatus.ConfigEntry
	nil,                       // 27: api.TiFlashStatus.ConfigEntry
	nil,                       // 28: api.TiFlashStatus.LearnerConfigEntry
	nil,                       // 29: api.TiDBStatus.ConfigEntry
	nil,                       // 30: api.GrafanaStatus.EnvsEntry
	(*structpb.Value)(nil),    // 31: google.protobuf.Value
}
var file_api_service_proto_depIdxs = []int32{
	1,  // 0: api.Component.resource:type_name -> api.Resource
	21, // 1: api.Component.config:type_name -> api.Component.ConfigEntry
	1,  // 2: api.TiFlashComponent.resource:type_name -> api.Resource
	22, // 3: api.TiFlashComponent.config:type_name -> api.TiFlashComponent.ConfigEntry
	23, // 4: api.TiFlashComponent.learner_config:type_name -> api.TiFlashComponent.LearnerConfigEntry
	1,  // 5: api.Prometheus.resource:type_name -> api.Resource
	1,  // 6: api.Grafana.resource:type_name -> api.Resource
	24, // 7: api.Grafana.envs:type_name -> api.Grafana.EnvsEntry
	0,  // 8: api.CreateClusterReq.user:type_name -> api.User
	2,  // 9: api.CreateClusterReq.pd:type_name -> api.Component
	2,  // 10: api.CreateClusterReq.tikv:type_name -> api.Component
	3,  // 11: api.CreateClusterReq.tiflash:type_name -> api.TiFlashComponent
	2,  // 12: api.CreateClusterReq.tidb:type_name -> api.Component
	4,  // 13: api.CreateClusterReq.prometheus:type_name -> api.Prometheus
	5,  // 14: api.CreateClusterReq.grafana:type_name -> api.Grafana
	10, // 15: api.GetClusterResp.data:type_name -> api.ClusterInfo
	11, // 16: api.ClusterInfo.pd:type_name -> api.PDStatus
	13, // 17: api.ClusterInfo.tikv:type_name -> api.TiKVStatus
	15, // 18: api.ClusterInfo.tiflash:type_name -> api.TiFlashStatus
	17, // 19: api.ClusterInfo.tidb:type_name -> api.TiDBStatus
	19, // 20: api.ClusterInfo.prometheus:type_name -> api.PrometheusStatus
	20, // 21: api.ClusterInfo.grafana:type_name -> api.GrafanaStatus
	1,  // 22: api.PDStatus.resource:type_name -> api.Resource
	25, // 23: api.PDStatus.config:type_name -> api.PDStatus.ConfigEntry
	12, // 24: api.PDStatus.members:type_name -> api.PDMember
	1,  // 25: api.TiKVStatus.resource:type_name -> api.Resource
	26, // 26: api.TiKVStatus.config:type_name -> api.TiKVStatus.ConfigEntry
	14, // 27: api.TiKVStatus.members:type_name -> api.TiKVMember
	1,  // 28: api.TiFlashStatus.resource:type_name -> api.Resource
	27, // 29: api.TiFlashStatus.config:type_name -> api.TiFlashStatus.ConfigEntry
	28, // 30: api.TiFlashStatus.learner_config:type_name -> api.TiFlashStatus.LearnerConfigEntry
	16, // 31: api.TiFlashStatus.members:type_name -> api.TiFlashMember
	1,  // 32: api.TiDBStatus.resource:type_name -> api.Resource
	29, // 33: api.TiDBStatus.config:type_name -> api.TiDBStatus.ConfigEntry
	18, // 34: api.TiDBStatus.members:type_name -> api.TiDBMember
	1,  // 35: api.PrometheusStatus.resource:type_name -> api.Resource
	1,  // 36: api.GrafanaStatus.resource:type_name -> api.Resource
	30, // 37: api.GrafanaStatus.envs:type_name -> api.GrafanaStatus.EnvsEntry
	31, // 38: api.Component.ConfigEntry.value:type_name -> google.protobuf.Value
	31, // 39: api.TiFlashComponent.ConfigEntry.value:type_name -> google.protobuf.Value
	31, // 40: api.TiFlashComponent.LearnerConfigEntry.value:type_name -> google.protobuf.Value
	31, // 41: api.PDStatus.ConfigEntry.value:type_name -> google.protobuf.Value
	31, // 42: api.TiKVStatus.ConfigEntry.value:type_name -> google.protobuf.Value
	31, // 43: api.TiFlashStatus.ConfigEntry.value:type_name -> google.protobuf.Value
	31, // 44: api.TiFlashStatus.LearnerConfigEntry.value:type_name -> google.protobuf.Value
	31, // 45: api.TiDBStatus.ConfigEntry.value:type_name -> google.protobuf.Value
	6,  // 46: api.Cluster.CreateCluster:input_type -> api.CreateClusterReq
	8,  // 47: api.Cluster.GetCluster:input_type -> api.GetClusterReq
	7,  // 48: api.Cluster.CreateCluster:output_type -> api.CreateClusterResp
	9,  // 49: api.Cluster.GetCluster:output_type -> api.GetClusterResp
	48, // [48:50] is the sub-list for method output_type
	46, // [46:48] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_api_service_proto_init() }
func file_api_service_proto_init() {
	if File_api_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TiFlashComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prometheus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grafana); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PDStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PDMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TiKVStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TiKVMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TiFlashStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TiFlashMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TiDBStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TiDBMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrometheusStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrafanaStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_service_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_api_service_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_api_service_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_api_service_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_api_service_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_api_service_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_api_service_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_api_service_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_service_proto_goTypes,
		DependencyIndexes: file_api_service_proto_depIdxs,
		MessageInfos:      file_api_service_proto_msgTypes,
	}.Build()
	File_api_service_proto = out.File
	file_api_service_proto_rawDesc = nil
	file_api_service_proto_goTypes = nil
	file_api_service_proto_depIdxs = nil
}
