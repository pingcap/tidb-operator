{
  "swagger": "2.0",
  "info": {
    "title": "TiDB Operator API",
    "description": "This is the TiDB Operator API.",
    "version": "v1-beta"
  },
  "tags": [
    {
      "name": "Cluster",
      "description": "Create, get, modify, and delete TiDB clusters."
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1beta/clusters": {
      "post": {
        "summary": "Create a cluster.",
        "operationId": "CreateCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "CreateClusterReq is the request for creating cluster.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateClusterReq"
            }
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/v1beta/clusters/{cluster_id}": {
      "get": {
        "summary": "Get a cluster.",
        "operationId": "GetCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cluster_id",
            "description": "The unique ID or name of the cluster.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      },
      "delete": {
        "summary": "Delete a cluster.",
        "operationId": "DeleteCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cluster_id",
            "description": "The unique ID or name of the cluster.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      },
      "put": {
        "summary": "Update a cluster.",
        "operationId": "UpdateCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cluster_id",
            "description": "The unique ID or name of the cluster.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "string",
                  "example": "v7.1.1",
                  "description": "The version of the TiDB cluster. Only official versions are supported now."
                },
                "pd": {
                  "$ref": "#/definitions/apiComponent",
                  "description": "The PD component of the cluster."
                },
                "tikv": {
                  "$ref": "#/definitions/apiComponent",
                  "description": "The TiKV component of the cluster."
                },
                "tiflash": {
                  "$ref": "#/definitions/apiTiFlashComponent",
                  "description": "The TiFlash component of the cluster."
                },
                "tidb": {
                  "$ref": "#/definitions/apiComponent",
                  "description": "The TiDB component of the cluster."
                }
              },
              "description": "UpdateClusterReq is the request for updating cluster.",
              "title": "UpdateClusterReq"
            }
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/v1beta/clusters/{cluster_id}/backups": {
      "post": {
        "summary": "Create a backup.",
        "operationId": "CreateBackup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateBackupResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cluster_id",
            "description": "The unique ID or name of the cluster.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "description": "CreateBackupReq is the request for creating backup.",
              "title": "CreateBackupReq"
            }
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/v1beta/clusters/{cluster_id}/backups/{backup_id}": {
      "get": {
        "summary": "Get a backup.",
        "operationId": "GetBackup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetBackupResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cluster_id",
            "description": "The unique ID or name of the cluster.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "backup_id",
            "description": "The unique ID of the backup.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      },
      "delete": {
        "summary": "Delete a backup.",
        "operationId": "DeleteBackup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteBackupResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cluster_id",
            "description": "The unique ID or name of the cluster.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "backup_id",
            "description": "The unique ID of the backup.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/v1beta/clusters/{cluster_id}/backups/{backup_id}:stop": {
      "post": {
        "summary": "Stop a backup.",
        "operationId": "StopBackup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiStopBackupResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cluster_id",
            "description": "The unique ID or name of the cluster.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "backup_id",
            "description": "The unique ID of the backup.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/v1beta/clusters/{cluster_id}/restores": {
      "post": {
        "summary": "Create a restore.",
        "operationId": "CreateRestore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateRestoreResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cluster_id",
            "description": "The unique ID or name of the cluster.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "description": "CreateRestoreReq is the request for creating restore.",
              "title": "CreateRestoreReq"
            }
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/v1beta/clusters/{cluster_id}/restores/{restore_id}": {
      "get": {
        "summary": "Get a restore.",
        "operationId": "GetRestore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetRestoreResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cluster_id",
            "description": "The unique ID or name of the cluster.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "restore_id",
            "description": "The unique ID of the restore.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/v1beta/clusters/{cluster_id}/restores/{restore_id}:stop": {
      "post": {
        "summary": "Stop a restore.",
        "operationId": "StopRestore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiStopRestoreResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cluster_id",
            "description": "The unique ID or name of the cluster.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "restore_id",
            "description": "The unique ID of the restore.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/v1beta/clusters/{cluster_id}:restart": {
      "post": {
        "summary": "Restart a cluster.",
        "operationId": "RestartCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiRestartClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cluster_id",
            "description": "The unique ID or name of the cluster.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/v1beta/clusters/{cluster_id}:start": {
      "post": {
        "summary": "Start a cluster.",
        "operationId": "StartCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiStartClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cluster_id",
            "description": "The unique ID or name of the cluster.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/v1beta/clusters/{cluster_id}:stop": {
      "post": {
        "summary": "Stop a cluster.",
        "operationId": "StopCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiStopClusterResp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cluster_id",
            "description": "The unique ID or name of the cluster.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    }
  },
  "definitions": {
    "apiClusterInfo": {
      "type": "object",
      "properties": {
        "cluster_id": {
          "type": "string",
          "example": "tidb-clsuter-123",
          "description": "The unique ID or name of the cluster."
        },
        "version": {
          "type": "string",
          "example": "v7.1.1",
          "description": "The version of the TiDB cluster."
        },
        "status": {
          "type": "string",
          "example": "running",
          "description": "The status of the TiDB cluster. Values include \"creating\", \"running\", \"deleting\", \"scaling\", \"upgrading\" and \"unavailable\"."
        },
        "pd": {
          "$ref": "#/definitions/apiPDStatus",
          "description": "The PD component of the cluster."
        },
        "tikv": {
          "$ref": "#/definitions/apiTiKVStatus",
          "description": "The TiKV component of the cluster."
        },
        "tiflash": {
          "$ref": "#/definitions/apiTiFlashStatus",
          "description": "The TiFlash component of the cluster."
        },
        "tidb": {
          "$ref": "#/definitions/apiTiDBStatus",
          "description": "The TiDB component of the cluster."
        },
        "prometheus": {
          "$ref": "#/definitions/apiPrometheusStatus",
          "description": "The Prometheus component of the cluster."
        },
        "grafana": {
          "$ref": "#/definitions/apiGrafanaStatus",
          "description": "The Grafana component of the cluster."
        }
      },
      "description": "ClusterInfo is the information of the cluster.",
      "title": "ClusterInfo",
      "required": [
        "cluster_idversionstatuspdtikvtidb"
      ]
    },
    "apiComponent": {
      "type": "object",
      "properties": {
        "replicas": {
          "type": "integer",
          "format": "int64",
          "example": 3,
          "description": "The number of replicas of the component."
        },
        "resource": {
          "$ref": "#/definitions/apiResource",
          "description": "The resource of the component for each replica."
        },
        "config": {
          "type": "object",
          "additionalProperties": {},
          "description": "The config of the component. JSON format."
        },
        "port": {
          "type": "integer",
          "format": "int64",
          "description": "The port of the component. Only used for TiDB now."
        }
      },
      "description": "Component is the component of the cluster.",
      "title": "Component"
    },
    "apiCreateBackupResp": {
      "type": "object"
    },
    "apiCreateClusterReq": {
      "type": "object",
      "properties": {
        "cluster_id": {
          "type": "string",
          "example": "tidb-clsuter-123",
          "description": "The unique ID or name of the cluster."
        },
        "version": {
          "type": "string",
          "example": "v7.1.1",
          "description": "The version of the TiDB cluster. Only official versions are supported now."
        },
        "user": {
          "$ref": "#/definitions/apiUser",
          "description": "The username and password of the cluster."
        },
        "pd": {
          "$ref": "#/definitions/apiComponent",
          "description": "The PD component of the cluster."
        },
        "tikv": {
          "$ref": "#/definitions/apiComponent",
          "description": "The TiKV component of the cluster."
        },
        "tiflash": {
          "$ref": "#/definitions/apiTiFlashComponent",
          "description": "The TiFlash component of the cluster."
        },
        "tidb": {
          "$ref": "#/definitions/apiComponent",
          "description": "The TiDB component of the cluster."
        },
        "prometheus": {
          "$ref": "#/definitions/apiPrometheus",
          "description": "The Prometheus component of the cluster."
        },
        "grafana": {
          "$ref": "#/definitions/apiGrafana",
          "description": "The Grafana component of the cluster."
        }
      },
      "description": "CreateClusterReq is the request for creating cluster.",
      "title": "CreateClusterReq",
      "required": [
        "cluster_idversionpdtikvtidb"
      ]
    },
    "apiCreateClusterResp": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true,
          "description": "Whether the request is successful."
        },
        "message": {
          "type": "string",
          "description": "The message of the response."
        }
      },
      "description": "CreateClusterResp is the response for creating cluster.",
      "title": "CreateClusterResp"
    },
    "apiCreateRestoreResp": {
      "type": "object"
    },
    "apiDeleteBackupResp": {
      "type": "object"
    },
    "apiDeleteClusterResp": {
      "type": "object"
    },
    "apiGetBackupResp": {
      "type": "object"
    },
    "apiGetClusterResp": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true,
          "description": "Whether the request is successful."
        },
        "message": {
          "type": "string",
          "description": "The message of the response."
        },
        "data": {
          "$ref": "#/definitions/apiClusterInfo",
          "description": "The information of the cluster."
        }
      },
      "description": "GetClusterResp is the response for getting cluster.",
      "title": "GetClusterResp"
    },
    "apiGetRestoreResp": {
      "type": "object"
    },
    "apiGrafana": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "example": "7.5.11",
          "description": "The version of the Grafana. Only official versions are supported now."
        },
        "resource": {
          "$ref": "#/definitions/apiResource",
          "description": "The resource of the Grafana."
        },
        "envs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The environment variables of the Grafana."
        },
        "port": {
          "type": "integer",
          "format": "int64",
          "description": "The port of the Grafana."
        }
      },
      "description": "Grafana is the Grafana component of the cluster.",
      "title": "Grafana",
      "required": [
        "versionresource"
      ]
    },
    "apiGrafanaStatus": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "example": "7.5.11",
          "description": "The version of the Grafana component."
        },
        "resource": {
          "$ref": "#/definitions/apiResource",
          "description": "The resource of the Grafana component."
        },
        "envs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The environment variables of the Grafana component."
        },
        "host": {
          "type": "string",
          "description": "The host (IP or domain name) of the Grafana component."
        },
        "port": {
          "type": "integer",
          "format": "int64",
          "example": 3000,
          "description": "The port of the Grafana component."
        }
      },
      "description": "GrafanaStatus is the status of the Grafana component.",
      "title": "GrafanaStatus",
      "required": [
        "versionresourcehostport"
      ]
    },
    "apiPDMember": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "pd-0",
          "description": "The name of the PD member."
        },
        "id": {
          "type": "string",
          "format": "uint64",
          "example": 123,
          "description": "The ID of the PD member."
        },
        "start_time": {
          "type": "string",
          "example": "2023-11-01T00:00:00Z",
          "description": "The latest start time of the PD member."
        },
        "health": {
          "type": "boolean",
          "example": true,
          "description": "Whether the PD member is healthy."
        }
      },
      "description": "PDMember is a member status of the PD component.",
      "title": "PDMember",
      "required": [
        "nameidstart_timehealth"
      ]
    },
    "apiPDStatus": {
      "type": "object",
      "properties": {
        "phase": {
          "type": "string",
          "example": "Normal",
          "description": "The phase of the PD component. Values include \"Normal\", \"Scale\" and \"Upgrade\"."
        },
        "replicas": {
          "type": "integer",
          "format": "int64",
          "example": 3,
          "description": "The number of replicas of the PD component."
        },
        "resource": {
          "$ref": "#/definitions/apiResource",
          "description": "The resource of the PD component for each replica."
        },
        "config": {
          "type": "object",
          "additionalProperties": {},
          "description": "The config of the PD component. JSON format."
        },
        "members": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiPDMember"
          },
          "description": "The members of the PD component."
        }
      },
      "description": "PDStatus is the status of the PD component.",
      "title": "PDStatus",
      "required": [
        "phasereplicasresourcemembers"
      ]
    },
    "apiPrometheus": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "example": "v2.27.1",
          "description": "The version of the Prometheus. Only official versions are supported now."
        },
        "resource": {
          "$ref": "#/definitions/apiResource",
          "description": "The resource of the Prometheus."
        },
        "command_options": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The command options of the Prometheus."
        }
      },
      "description": "Prometheus is the Prometheus component of the cluster.",
      "title": "Prometheus",
      "required": [
        "versionresource"
      ]
    },
    "apiPrometheusStatus": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "example": "v2.27.1",
          "description": "The version of the Prometheus component."
        },
        "resource": {
          "$ref": "#/definitions/apiResource",
          "description": "The resource of the Prometheus component."
        },
        "command_options": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The command options of the Prometheus component."
        }
      },
      "description": "PrometheusStatus is the status of the Prometheus component.",
      "title": "PrometheusStatus",
      "required": [
        "versionresource"
      ]
    },
    "apiResource": {
      "type": "object",
      "properties": {
        "cpu": {
          "type": "integer",
          "format": "int64",
          "example": 2,
          "description": "The number of CPU cores for each replica."
        },
        "memory": {
          "type": "integer",
          "format": "int64",
          "example": 4,
          "description": "The amount of memory for each replica. unit: Gi"
        },
        "storage": {
          "type": "integer",
          "format": "int64",
          "example": 100,
          "description": "The amount of storage for each replica. unit: Gi. This is used for PD, TiKV and TiFlash now."
        }
      },
      "description": "Resource is the resource of the component for each replica.",
      "title": "Resource",
      "required": [
        "cpumemory"
      ]
    },
    "apiRestartClusterResp": {
      "type": "object"
    },
    "apiStartClusterResp": {
      "type": "object"
    },
    "apiStopBackupResp": {
      "type": "object"
    },
    "apiStopClusterResp": {
      "type": "object"
    },
    "apiStopRestoreResp": {
      "type": "object"
    },
    "apiTiDBMember": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "tidb-0",
          "description": "The name of the TiDB member."
        },
        "start_time": {
          "type": "string",
          "example": "2023-11-01T00:00:00Z",
          "description": "The latest start time of the TiDB member."
        },
        "health": {
          "type": "boolean",
          "example": true,
          "description": "Whether the TiDB member is healthy."
        }
      },
      "description": "TiDBMember is a member status of the TiDB component.",
      "title": "TiDBMember",
      "required": [
        "namestart_timehealth"
      ]
    },
    "apiTiDBStatus": {
      "type": "object",
      "properties": {
        "phase": {
          "type": "string",
          "example": "Normal",
          "description": "The phase of the TiDB component. Values include \"Normal\", \"Scale\" and \"Upgrade\"."
        },
        "replicas": {
          "type": "integer",
          "format": "int64",
          "example": 1,
          "description": "The number of replicas of the TiDB component."
        },
        "resource": {
          "$ref": "#/definitions/apiResource",
          "description": "The resource of the TiDB component for each replica."
        },
        "config": {
          "type": "object",
          "additionalProperties": {},
          "description": "The config of the TiDB component. JSON format."
        },
        "host": {
          "type": "string",
          "description": "The host (IP or domain name) of the TiDB component."
        },
        "port": {
          "type": "integer",
          "format": "int64",
          "example": 4000,
          "description": "The port of the TiDB component."
        },
        "members": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiTiDBMember"
          },
          "description": "The members of the TiDB component."
        }
      },
      "description": "TiDBStatus is the status of the TiDB component.",
      "title": "TiDBStatus",
      "required": [
        "phasereplicasresourcehostportmembers"
      ]
    },
    "apiTiFlashComponent": {
      "type": "object",
      "properties": {
        "replicas": {
          "type": "integer",
          "format": "int64",
          "example": 3,
          "description": "The number of replicas of the component."
        },
        "resource": {
          "$ref": "#/definitions/apiResource",
          "description": "The resource of the component for each replica."
        },
        "config": {
          "type": "object",
          "additionalProperties": {},
          "description": "The config of the component. JSON format."
        },
        "learner_config": {
          "type": "object",
          "additionalProperties": {},
          "description": "The TiFlash learner config of the component. JSON format."
        },
        "port": {
          "type": "integer",
          "format": "int64",
          "description": "The port of the component. Only used for TiDB now."
        }
      },
      "description": "Component is the component of the cluster.",
      "title": "Component"
    },
    "apiTiFlashMember": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "tiflash-0",
          "description": "The name of the TiFlash member."
        },
        "id": {
          "type": "string",
          "format": "uint64",
          "example": 123,
          "description": "The ID of the TiFlash member."
        },
        "start_time": {
          "type": "string",
          "example": "2023-11-01T00:00:00Z",
          "description": "The latest start time of the TiFlash member."
        },
        "state": {
          "type": "string",
          "example": "Up",
          "description": "The state of the TiFlash member."
        }
      },
      "description": "TiFlashMember is a member status of the TiFlash component.",
      "title": "TiFlashMember",
      "required": [
        "nameidstart_timestate"
      ]
    },
    "apiTiFlashStatus": {
      "type": "object",
      "properties": {
        "phase": {
          "type": "string",
          "example": "Normal",
          "description": "The phase of the TiFlash component. Values include \"Normal\", \"Scale\" and \"Upgrade\"."
        },
        "replicas": {
          "type": "integer",
          "format": "int64",
          "example": 2,
          "description": "The number of replicas of the TiFlash component."
        },
        "resource": {
          "$ref": "#/definitions/apiResource",
          "description": "The resource of the TiFlash component for each replica."
        },
        "config": {
          "type": "object",
          "additionalProperties": {},
          "description": "The config of the TiFlash component. JSON format."
        },
        "learner_config": {
          "type": "object",
          "additionalProperties": {},
          "description": "The TiFlash learner config of the TiFlash component. JSON format."
        },
        "members": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiTiFlashMember"
          },
          "description": "The members of the TiFlash component."
        }
      },
      "description": "TiFlashStatus is the status of the TiFlash component.",
      "title": "TiFlashStatus",
      "required": [
        "phasereplicasresourcemembers"
      ]
    },
    "apiTiKVMember": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "tikv-0",
          "description": "The name of the TiKV member."
        },
        "id": {
          "type": "string",
          "format": "uint64",
          "example": 123,
          "description": "The ID of the TiKV member."
        },
        "start_time": {
          "type": "string",
          "example": "2023-11-01T00:00:00Z",
          "description": "The latest start time of the TiKV member."
        },
        "state": {
          "type": "string",
          "example": "Up",
          "description": "The state of the TiKV member."
        }
      },
      "description": "TiKVMember is a member status of the TiKV component.",
      "title": "TiKVMember",
      "required": [
        "nameidstart_timestate"
      ]
    },
    "apiTiKVStatus": {
      "type": "object",
      "properties": {
        "phase": {
          "type": "string",
          "example": "Normal",
          "description": "The phase of the TiKV component. Values include \"Normal\", \"Scale\" and \"Upgrade\"."
        },
        "replicas": {
          "type": "integer",
          "format": "int64",
          "example": 3,
          "description": "The number of replicas of the TiKV component."
        },
        "resource": {
          "$ref": "#/definitions/apiResource",
          "description": "The resource of the TiKV component for each replica."
        },
        "config": {
          "type": "object",
          "additionalProperties": {},
          "description": "The config of the TiKV component. JSON format."
        },
        "members": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiTiKVMember"
          },
          "description": "The members of the TiKV component."
        }
      },
      "description": "TiKVStatus is the status of the TiKV component.",
      "title": "TiKVStatus",
      "required": [
        "phasereplicasresourcemembers"
      ]
    },
    "apiUpdateClusterResp": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true,
          "description": "Whether the request is successful."
        },
        "message": {
          "type": "string",
          "description": "The message of the response."
        }
      },
      "description": "UpdateClusterResp is the response for updating cluster.",
      "title": "UpdateClusterResp"
    },
    "apiUser": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "root",
          "description": "The username of the cluster."
        },
        "password": {
          "type": "string",
          "example": "123456",
          "description": "The password of the cluster."
        }
      },
      "description": "User is the username and password of the cluster.",
      "title": "User",
      "required": [
        "usernamepassword"
      ]
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufNullValue": {
      "type": "string",
      "enum": null,
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
