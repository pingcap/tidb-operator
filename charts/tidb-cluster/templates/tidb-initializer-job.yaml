{{- if (.Values.tidb.passwordSecret) or (.Values.tidb.initSql) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.clusterName }}-tidb-initializer
  labels:
    app.kubernetes.io/name: {{ template "chart.name" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Values.clusterName }}
    app.kubernetes.io/component: tidb-initializer
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+"  "_" }}
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "chart.name" . }}
        app.kubernetes.io/instance: {{ .Values.clusterName }}
        app.kubernetes.io/component: tidb-initializer
    spec:
      restartPolicy: OnFailure
      containers:
      - name: mysql-client
        image: {{ .Values.mysqlClient.image }}
        imagePullPolicy: {{ .Values.mysqlClient.imagePullPolicy | default "IfNotPresent" }}
        command:
        - python
        - -c
        - |
          import os, MySQLdb
          host = {{ printf "%s-tidb" .Values.clusterName | quote }}
          port = 4000
          root_password = os.environ.get('ROOT_PASSWORD')
          system_password = os.environ.get('SYSTEM_PASSWORD')
          conn = MySQLdb.connect(host=host, port=port, user='root', connect_timeout=5)
          if root_password:
              conn.cursor().execute("set password for 'root'@'%%' = %s;", (root_password,))
          if system_password:
              conn.cursor().execute("create user 'system'@'%%' identified by %s;", (system_password,))
          conn.cursor().execute("flush privileges;")
          conn.commit()
          {{- if .Values.tidb.initSql }}
          with open('/data/init.sql', 'r') as sql:
              for line in sql.readlines():
                  conn.cursor().execute(line)
                  conn.commit()
          {{- end }}
        env:
        - name: ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.tidb.passwordSecret }}
              key: root
        - name: SYSTEM_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.tidb.passwordSecret }}
              key: system
              optional: true
      {{- if .Values.tidb.initSql }}
        volumeMounts:
        - name: init-sql
          mountPath: /data
          readOnly: true
      volumes:
      - name: init-sql
        configMap:
          name: {{ .Values.clusterName }}-tidb
          items:
          - key: init-sql
            path: init.sql
      {{- end }}
{{- end }}
