{{- if (.Values.tidb.passwordSecretName) or (.Values.tidb.initSql) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.clusterName }}-tidb-initializer
  labels:
    app.kubernetes.io/name: {{ template "chart.name" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Values.clusterName }}
    app.kubernetes.io/component: tidb-initializer
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+"  "_" }}
spec:
  backoffLimit: 1000
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "chart.name" . }}
        app.kubernetes.io/instance: {{ .Values.clusterName }}
        app.kubernetes.io/component: tidb-initializer
    spec:
      restartPolicy: OnFailure
      containers:
      - name: mysql-client
        image: {{ .Values.mysqlClient.image }}
        imagePullPolicy: {{ .Values.mysqlClient.imagePullPolicy | default "IfNotPresent" }}
        command:
        - python
        - -c
        - |
          import os, MySQLdb
          host = {{ printf "%s-tidb" .Values.clusterName | quote }}
          port = 4000
          password_dir = '/etc/tidb/password'
          conn = MySQLdb.connect(host=host, port=port, user='root', connect_timeout=5)
          for file in os.listdir(password_dir):
              if file.startswith('.'):
                  continue
              user = file
              with open(os.path.join(password_dir, file), 'r') as f:
                  password = f.read()
              if user == 'root':
                  conn.cursor().execute("set password for 'root'@'%%' = %s;", (password,))
              else:
                  conn.cursor().execute("create user %s@'%%' identified by %s;", (user, password,))
          conn.cursor().execute("flush privileges;")
          conn.commit()
          {{- if .Values.tidb.initSql }}
          with open('/data/init.sql', 'r') as sql:
              for line in sql.readlines():
                  conn.cursor().execute(line)
                  conn.commit()
          {{- end }}
        volumeMounts:
        - name: password
          mountPath: /etc/tidb/password
          readOnly: true
        {{- if .Values.tidb.initSql }}
        - name: init-sql
          mountPath: /data
          readOnly: true
        {{- end }}
      volumes:
      - name: password
        secret:
          secretName: {{ .Values.tidb.passwordSecretName }}
      {{- if .Values.tidb.initSql }}
      - name: init-sql
        configMap:
          name: {{ .Values.clusterName }}-tidb
          items:
          - key: init-sql
            path: init.sql
      {{- end }}
{{- end }}
