//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Copyright 2024 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by runtime-gen. DO NOT EDIT.

package runtime

import (
	"unsafe"

	"github.com/pingcap/tidb-operator/api/v2/core/v1alpha1"
	metav1alpha1 "github.com/pingcap/tidb-operator/api/v2/meta/v1alpha1"
	"k8s.io/apimachinery/pkg/api/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

type (
	TiKV v1alpha1.TiKV
)

type TiKVTuple struct{}

var _ InstanceTuple[*v1alpha1.TiKV, *TiKV] = TiKVTuple{}

func (TiKVTuple) From(t *v1alpha1.TiKV) *TiKV {
	return FromTiKV(t)
}

func (TiKVTuple) FromSlice(t []*v1alpha1.TiKV) []*TiKV {
	return FromTiKVSlice(t)
}

func (TiKVTuple) To(t *TiKV) *v1alpha1.TiKV {
	return ToTiKV(t)
}

func (TiKVTuple) ToSlice(t []*TiKV) []*v1alpha1.TiKV {
	return ToTiKVSlice(t)
}

func FromTiKV(in *v1alpha1.TiKV) *TiKV {
	return (*TiKV)(in)
}

func ToTiKV(in *TiKV) *v1alpha1.TiKV {
	return (*v1alpha1.TiKV)(in)
}

func FromTiKVSlice(ins []*v1alpha1.TiKV) []*TiKV {
	return *(*[]*TiKV)(unsafe.Pointer(&ins))
}

func ToTiKVSlice(ins []*TiKV) []*v1alpha1.TiKV {
	return *(*[]*v1alpha1.TiKV)(unsafe.Pointer(&ins))
}

var _ Instance = &TiKV{}

func (in *TiKV) DeepCopyObject() runtime.Object {
	return (*v1alpha1.TiKV)(in).DeepCopyObject()
}

func (in *TiKV) To() *v1alpha1.TiKV {
	return ToTiKV(in)
}

func (in *TiKV) GetTopology() v1alpha1.Topology {
	return in.Spec.Topology
}

func (in *TiKV) SetTopology(t v1alpha1.Topology) {
	in.Spec.Topology = t
}

func (in *TiKV) GetUpdateRevision() string {
	if in.Labels == nil {
		return ""
	}
	return in.Labels[v1alpha1.LabelKeyInstanceRevisionHash]
}

func (in *TiKV) CurrentRevision() string {
	return in.Status.CurrentRevision
}

func (in *TiKV) SetCurrentRevision(rev string) {
	in.Status.CurrentRevision = rev
}

func (in *TiKV) IsReady() bool {
	cond := meta.FindStatusCondition(in.Status.Conditions, v1alpha1.CondReady)
	if cond == nil {
		return false
	}
	if cond.ObservedGeneration != in.GetGeneration() {
		return false
	}
	return cond.Status == metav1.ConditionTrue
}

func (in *TiKV) IsUpToDate() bool {
	return in.Status.ObservedGeneration == in.GetGeneration() && in.GetUpdateRevision() == in.Status.CurrentRevision
}

func (in *TiKV) Conditions() []metav1.Condition {
	return in.Status.Conditions
}

func (in *TiKV) SetConditions(conds []metav1.Condition) {
	in.Status.Conditions = conds
}

func (in *TiKV) ObservedGeneration() int64 {
	return in.Status.ObservedGeneration
}

func (in *TiKV) SetObservedGeneration(gen int64) {
	in.Status.ObservedGeneration = gen
}

func (in *TiKV) SetCluster(cluster string) {
	in.Spec.Cluster.Name = cluster
}

func (in *TiKV) Cluster() string {
	return in.Spec.Cluster.Name
}

func (*TiKV) Component() string {
	return v1alpha1.LabelValComponentTiKV
}

func (in *TiKV) PodOverlay() *v1alpha1.PodOverlay {
	if in.Spec.Overlay == nil {
		return nil
	}
	return in.Spec.Overlay.Pod
}

func (in *TiKV) Features() []metav1alpha1.Feature {
	return in.Spec.Features
}

type (
	TiKVGroup v1alpha1.TiKVGroup
)

type TiKVGroupTuple struct{}

var _ GroupTuple[*v1alpha1.TiKVGroup, *TiKVGroup] = TiKVGroupTuple{}

func (TiKVGroupTuple) From(t *v1alpha1.TiKVGroup) *TiKVGroup {
	return FromTiKVGroup(t)
}

func (TiKVGroupTuple) FromSlice(t []*v1alpha1.TiKVGroup) []*TiKVGroup {
	return FromTiKVGroupSlice(t)
}

func (TiKVGroupTuple) To(t *TiKVGroup) *v1alpha1.TiKVGroup {
	return ToTiKVGroup(t)
}

func (TiKVGroupTuple) ToSlice(t []*TiKVGroup) []*v1alpha1.TiKVGroup {
	return ToTiKVGroupSlice(t)
}

func FromTiKVGroup(g *v1alpha1.TiKVGroup) *TiKVGroup {
	return (*TiKVGroup)(g)
}

func ToTiKVGroup(g *TiKVGroup) *v1alpha1.TiKVGroup {
	return (*v1alpha1.TiKVGroup)(g)
}

func FromTiKVGroupSlice(gs []*v1alpha1.TiKVGroup) []*TiKVGroup {
	return *(*[]*TiKVGroup)(unsafe.Pointer(&gs))
}

func ToTiKVGroupSlice(gs []*TiKVGroup) []*v1alpha1.TiKVGroup {
	return *(*[]*v1alpha1.TiKVGroup)(unsafe.Pointer(&gs))
}

var _ Group = &TiKVGroup{}

func (g *TiKVGroup) DeepCopyObject() runtime.Object {
	return (*v1alpha1.TiKVGroup)(g)
}

func (g *TiKVGroup) To() *v1alpha1.TiKVGroup {
	return ToTiKVGroup(g)
}

func (g *TiKVGroup) SetReplicas(replicas int32) {
	g.Spec.Replicas = &replicas
}

func (g *TiKVGroup) Replicas() int32 {
	if g.Spec.Replicas == nil {
		return 1
	}
	return *g.Spec.Replicas
}

func (g *TiKVGroup) SetVersion(version string) {
	g.Spec.Template.Spec.Version = version
}

func (g *TiKVGroup) Version() string {
	return g.Spec.Template.Spec.Version
}

func (g *TiKVGroup) SetCluster(cluster string) {
	g.Spec.Cluster.Name = cluster
}

func (g *TiKVGroup) Cluster() string {
	return g.Spec.Cluster.Name
}

func (*TiKVGroup) Component() string {
	return v1alpha1.LabelValComponentTiKV
}

func (g *TiKVGroup) Conditions() []metav1.Condition {
	return g.Status.Conditions
}

func (g *TiKVGroup) SetConditions(conds []metav1.Condition) {
	g.Status.Conditions = conds
}

func (g *TiKVGroup) ObservedGeneration() int64 {
	return g.Status.ObservedGeneration
}

func (g *TiKVGroup) SetObservedGeneration(gen int64) {
	g.Status.ObservedGeneration = gen
}

func (g *TiKVGroup) SetStatusVersion(version string) {
	g.Status.Version = version
}

func (g *TiKVGroup) StatusVersion() string {
	return g.Status.Version
}

func (g *TiKVGroup) SetStatusReplicas(replicas, ready, update, current int32) {
	g.Status.Replicas = replicas
	g.Status.ReadyReplicas = ready
	g.Status.UpdatedReplicas = update
	g.Status.CurrentReplicas = current
}

func (g *TiKVGroup) StatusReplicas() (replicas, ready, update, current int32) {
	return g.Status.Replicas,
		g.Status.ReadyReplicas,
		g.Status.UpdatedReplicas,
		g.Status.CurrentReplicas
}

func (g *TiKVGroup) SetStatusRevision(update, current string, collisionCount *int32) {
	g.Status.UpdateRevision = update
	g.Status.CurrentRevision = current
	g.Status.CollisionCount = collisionCount
}

func (g *TiKVGroup) StatusRevision() (update, current string, collisionCount *int32) {
	return g.Status.UpdateRevision,
		g.Status.CurrentRevision,
		g.Status.CollisionCount
}

func (g *TiKVGroup) SetStatusSelector(l string) {
	g.Status.Selector = l
}

func (g *TiKVGroup) StatusSelector() string {
	return g.Status.Selector
}

func (g *TiKVGroup) TemplateLabels() map[string]string {
	return g.Spec.Template.Labels
}

func (g *TiKVGroup) TemplateAnnotations() map[string]string {
	return g.Spec.Template.Annotations
}

func (g *TiKVGroup) Features() []metav1alpha1.Feature {
	return g.Spec.Features
}
