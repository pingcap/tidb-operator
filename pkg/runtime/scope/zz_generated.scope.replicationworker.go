//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Copyright 2024 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by runtime-gen. DO NOT EDIT.

package scope

import (
	"github.com/pingcap/tidb-operator/api/v2/core/v1alpha1"
	"github.com/pingcap/tidb-operator/pkg/runtime"
)

type (
	ReplicationWorker struct{}
)

func (ReplicationWorker) From(f *v1alpha1.ReplicationWorker) *runtime.ReplicationWorker {
	return runtime.FromReplicationWorker(f)
}

func (ReplicationWorker) To(t *runtime.ReplicationWorker) *v1alpha1.ReplicationWorker {
	return runtime.ToReplicationWorker(t)
}

func (ReplicationWorker) Component() string {
	return v1alpha1.LabelValComponentReplicationWorker
}

func (ReplicationWorker) NewList() *v1alpha1.ReplicationWorkerList {
	return &v1alpha1.ReplicationWorkerList{}
}

func (ReplicationWorker) GetItems(l *v1alpha1.ReplicationWorkerList) []*v1alpha1.ReplicationWorker {
	items := make([]*v1alpha1.ReplicationWorker, 0, len(l.Items))
	for i := range l.Items {
		items = append(items, &l.Items[i])
	}
	return items
}

type ReplicationWorkerGroup struct{}

func (ReplicationWorkerGroup) From(f *v1alpha1.ReplicationWorkerGroup) *runtime.ReplicationWorkerGroup {
	return runtime.FromReplicationWorkerGroup(f)
}

func (ReplicationWorkerGroup) To(t *runtime.ReplicationWorkerGroup) *v1alpha1.ReplicationWorkerGroup {
	return runtime.ToReplicationWorkerGroup(t)
}

func (ReplicationWorkerGroup) Component() string {
	return v1alpha1.LabelValComponentReplicationWorker
}

func (ReplicationWorkerGroup) NewList() *v1alpha1.ReplicationWorkerGroupList {
	return &v1alpha1.ReplicationWorkerGroupList{}
}

func (ReplicationWorkerGroup) GetItems(l *v1alpha1.ReplicationWorkerGroupList) []*v1alpha1.ReplicationWorkerGroup {
	items := make([]*v1alpha1.ReplicationWorkerGroup, 0, len(l.Items))
	for i := range l.Items {
		items = append(items, &l.Items[i])
	}
	return items
}

func (ReplicationWorkerGroup) Instance() ReplicationWorker {
	return ReplicationWorker{}
}
