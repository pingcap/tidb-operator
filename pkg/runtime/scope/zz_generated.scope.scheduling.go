//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Copyright 2024 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by runtime-gen. DO NOT EDIT.

package scope

import (
	"github.com/pingcap/tidb-operator/api/v2/core/v1alpha1"
	"github.com/pingcap/tidb-operator/pkg/runtime"
)

type (
	Scheduling struct{}
)

func (Scheduling) From(f *v1alpha1.Scheduling) *runtime.Scheduling {
	return runtime.FromScheduling(f)
}

func (Scheduling) To(t *runtime.Scheduling) *v1alpha1.Scheduling {
	return runtime.ToScheduling(t)
}

func (Scheduling) Component() string {
	return v1alpha1.LabelValComponentScheduling
}

func (Scheduling) NewList() *v1alpha1.SchedulingList {
	return &v1alpha1.SchedulingList{}
}

func (Scheduling) GetItems(l *v1alpha1.SchedulingList) []*v1alpha1.Scheduling {
	items := make([]*v1alpha1.Scheduling, 0, len(l.Items))
	for i := range l.Items {
		items = append(items, &l.Items[i])
	}
	return items
}

type SchedulingGroup struct{}

func (SchedulingGroup) From(f *v1alpha1.SchedulingGroup) *runtime.SchedulingGroup {
	return runtime.FromSchedulingGroup(f)
}

func (SchedulingGroup) To(t *runtime.SchedulingGroup) *v1alpha1.SchedulingGroup {
	return runtime.ToSchedulingGroup(t)
}

func (SchedulingGroup) Component() string {
	return v1alpha1.LabelValComponentScheduling
}

func (SchedulingGroup) NewList() *v1alpha1.SchedulingGroupList {
	return &v1alpha1.SchedulingGroupList{}
}

func (SchedulingGroup) GetItems(l *v1alpha1.SchedulingGroupList) []*v1alpha1.SchedulingGroup {
	items := make([]*v1alpha1.SchedulingGroup, 0, len(l.Items))
	for i := range l.Items {
		items = append(items, &l.Items[i])
	}
	return items
}

func (SchedulingGroup) Instance() Scheduling {
	return Scheduling{}
}
