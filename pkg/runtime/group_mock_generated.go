// Copyright 2024 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tidb-operator/pkg/runtime (interfaces: Group)

// Package runtime is a generated GoMock package.
package runtime

import (
	reflect "reflect"

	v1alpha1 "github.com/pingcap/tidb-operator/api/v2/meta/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
)

// MockGroup is a mock of Group interface.
type MockGroup struct {
	ctrl     *gomock.Controller
	recorder *MockGroupMockRecorder
	isgomock struct{}
}

// MockGroupMockRecorder is the mock recorder for MockGroup.
type MockGroupMockRecorder struct {
	mock *MockGroup
}

// NewMockGroup creates a new mock instance.
func NewMockGroup(ctrl *gomock.Controller) *MockGroup {
	mock := &MockGroup{ctrl: ctrl}
	mock.recorder = &MockGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroup) EXPECT() *MockGroupMockRecorder {
	return m.recorder
}

// ClientCASecretName mocks base method.
func (m *MockGroup) ClientCASecretName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientCASecretName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClientCASecretName indicates an expected call of ClientCASecretName.
func (mr *MockGroupMockRecorder) ClientCASecretName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientCASecretName", reflect.TypeOf((*MockGroup)(nil).ClientCASecretName))
}

// ClientCertKeyPairSecretName mocks base method.
func (m *MockGroup) ClientCertKeyPairSecretName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientCertKeyPairSecretName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClientCertKeyPairSecretName indicates an expected call of ClientCertKeyPairSecretName.
func (mr *MockGroupMockRecorder) ClientCertKeyPairSecretName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientCertKeyPairSecretName", reflect.TypeOf((*MockGroup)(nil).ClientCertKeyPairSecretName))
}

// ClientInsecureSkipTLSVerify mocks base method.
func (m *MockGroup) ClientInsecureSkipTLSVerify() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientInsecureSkipTLSVerify")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ClientInsecureSkipTLSVerify indicates an expected call of ClientInsecureSkipTLSVerify.
func (mr *MockGroupMockRecorder) ClientInsecureSkipTLSVerify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientInsecureSkipTLSVerify", reflect.TypeOf((*MockGroup)(nil).ClientInsecureSkipTLSVerify))
}

// Cluster mocks base method.
func (m *MockGroup) Cluster() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster")
	ret0, _ := ret[0].(string)
	return ret0
}

// Cluster indicates an expected call of Cluster.
func (mr *MockGroupMockRecorder) Cluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockGroup)(nil).Cluster))
}

// ClusterCASecretName mocks base method.
func (m *MockGroup) ClusterCASecretName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterCASecretName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClusterCASecretName indicates an expected call of ClusterCASecretName.
func (mr *MockGroupMockRecorder) ClusterCASecretName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterCASecretName", reflect.TypeOf((*MockGroup)(nil).ClusterCASecretName))
}

// ClusterCertKeyPairSecretName mocks base method.
func (m *MockGroup) ClusterCertKeyPairSecretName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterCertKeyPairSecretName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClusterCertKeyPairSecretName indicates an expected call of ClusterCertKeyPairSecretName.
func (mr *MockGroupMockRecorder) ClusterCertKeyPairSecretName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterCertKeyPairSecretName", reflect.TypeOf((*MockGroup)(nil).ClusterCertKeyPairSecretName))
}

// Component mocks base method.
func (m *MockGroup) Component() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Component")
	ret0, _ := ret[0].(string)
	return ret0
}

// Component indicates an expected call of Component.
func (mr *MockGroupMockRecorder) Component() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Component", reflect.TypeOf((*MockGroup)(nil).Component))
}

// Conditions mocks base method.
func (m *MockGroup) Conditions() []v1.Condition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conditions")
	ret0, _ := ret[0].([]v1.Condition)
	return ret0
}

// Conditions indicates an expected call of Conditions.
func (mr *MockGroupMockRecorder) Conditions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conditions", reflect.TypeOf((*MockGroup)(nil).Conditions))
}

// Features mocks base method.
func (m *MockGroup) Features() []v1alpha1.Feature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features")
	ret0, _ := ret[0].([]v1alpha1.Feature)
	return ret0
}

// Features indicates an expected call of Features.
func (mr *MockGroupMockRecorder) Features() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockGroup)(nil).Features))
}

// GetAnnotations mocks base method.
func (m *MockGroup) GetAnnotations() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotations")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetAnnotations indicates an expected call of GetAnnotations.
func (mr *MockGroupMockRecorder) GetAnnotations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotations", reflect.TypeOf((*MockGroup)(nil).GetAnnotations))
}

// GetCreationTimestamp mocks base method.
func (m *MockGroup) GetCreationTimestamp() v1.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreationTimestamp")
	ret0, _ := ret[0].(v1.Time)
	return ret0
}

// GetCreationTimestamp indicates an expected call of GetCreationTimestamp.
func (mr *MockGroupMockRecorder) GetCreationTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreationTimestamp", reflect.TypeOf((*MockGroup)(nil).GetCreationTimestamp))
}

// GetDeletionGracePeriodSeconds mocks base method.
func (m *MockGroup) GetDeletionGracePeriodSeconds() *int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletionGracePeriodSeconds")
	ret0, _ := ret[0].(*int64)
	return ret0
}

// GetDeletionGracePeriodSeconds indicates an expected call of GetDeletionGracePeriodSeconds.
func (mr *MockGroupMockRecorder) GetDeletionGracePeriodSeconds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletionGracePeriodSeconds", reflect.TypeOf((*MockGroup)(nil).GetDeletionGracePeriodSeconds))
}

// GetDeletionTimestamp mocks base method.
func (m *MockGroup) GetDeletionTimestamp() *v1.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletionTimestamp")
	ret0, _ := ret[0].(*v1.Time)
	return ret0
}

// GetDeletionTimestamp indicates an expected call of GetDeletionTimestamp.
func (mr *MockGroupMockRecorder) GetDeletionTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletionTimestamp", reflect.TypeOf((*MockGroup)(nil).GetDeletionTimestamp))
}

// GetFinalizers mocks base method.
func (m *MockGroup) GetFinalizers() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalizers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetFinalizers indicates an expected call of GetFinalizers.
func (mr *MockGroupMockRecorder) GetFinalizers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalizers", reflect.TypeOf((*MockGroup)(nil).GetFinalizers))
}

// GetGenerateName mocks base method.
func (m *MockGroup) GetGenerateName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenerateName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGenerateName indicates an expected call of GetGenerateName.
func (mr *MockGroupMockRecorder) GetGenerateName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenerateName", reflect.TypeOf((*MockGroup)(nil).GetGenerateName))
}

// GetGeneration mocks base method.
func (m *MockGroup) GetGeneration() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeneration")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetGeneration indicates an expected call of GetGeneration.
func (mr *MockGroupMockRecorder) GetGeneration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeneration", reflect.TypeOf((*MockGroup)(nil).GetGeneration))
}

// GetLabels mocks base method.
func (m *MockGroup) GetLabels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetLabels indicates an expected call of GetLabels.
func (mr *MockGroupMockRecorder) GetLabels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabels", reflect.TypeOf((*MockGroup)(nil).GetLabels))
}

// GetManagedFields mocks base method.
func (m *MockGroup) GetManagedFields() []v1.ManagedFieldsEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagedFields")
	ret0, _ := ret[0].([]v1.ManagedFieldsEntry)
	return ret0
}

// GetManagedFields indicates an expected call of GetManagedFields.
func (mr *MockGroupMockRecorder) GetManagedFields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagedFields", reflect.TypeOf((*MockGroup)(nil).GetManagedFields))
}

// GetName mocks base method.
func (m *MockGroup) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockGroupMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockGroup)(nil).GetName))
}

// GetNamespace mocks base method.
func (m *MockGroup) GetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockGroupMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockGroup)(nil).GetNamespace))
}

// GetOwnerReferences mocks base method.
func (m *MockGroup) GetOwnerReferences() []v1.OwnerReference {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnerReferences")
	ret0, _ := ret[0].([]v1.OwnerReference)
	return ret0
}

// GetOwnerReferences indicates an expected call of GetOwnerReferences.
func (mr *MockGroupMockRecorder) GetOwnerReferences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnerReferences", reflect.TypeOf((*MockGroup)(nil).GetOwnerReferences))
}

// GetResourceVersion mocks base method.
func (m *MockGroup) GetResourceVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetResourceVersion indicates an expected call of GetResourceVersion.
func (mr *MockGroupMockRecorder) GetResourceVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceVersion", reflect.TypeOf((*MockGroup)(nil).GetResourceVersion))
}

// GetSelfLink mocks base method.
func (m *MockGroup) GetSelfLink() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelfLink")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSelfLink indicates an expected call of GetSelfLink.
func (mr *MockGroupMockRecorder) GetSelfLink() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelfLink", reflect.TypeOf((*MockGroup)(nil).GetSelfLink))
}

// GetUID mocks base method.
func (m *MockGroup) GetUID() types.UID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUID")
	ret0, _ := ret[0].(types.UID)
	return ret0
}

// GetUID indicates an expected call of GetUID.
func (mr *MockGroupMockRecorder) GetUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUID", reflect.TypeOf((*MockGroup)(nil).GetUID))
}

// ObservedGeneration mocks base method.
func (m *MockGroup) ObservedGeneration() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObservedGeneration")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ObservedGeneration indicates an expected call of ObservedGeneration.
func (mr *MockGroupMockRecorder) ObservedGeneration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObservedGeneration", reflect.TypeOf((*MockGroup)(nil).ObservedGeneration))
}

// Replicas mocks base method.
func (m *MockGroup) Replicas() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replicas")
	ret0, _ := ret[0].(int32)
	return ret0
}

// Replicas indicates an expected call of Replicas.
func (mr *MockGroupMockRecorder) Replicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replicas", reflect.TypeOf((*MockGroup)(nil).Replicas))
}

// SetAnnotations mocks base method.
func (m *MockGroup) SetAnnotations(annotations map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAnnotations", annotations)
}

// SetAnnotations indicates an expected call of SetAnnotations.
func (mr *MockGroupMockRecorder) SetAnnotations(annotations any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAnnotations", reflect.TypeOf((*MockGroup)(nil).SetAnnotations), annotations)
}

// SetCluster mocks base method.
func (m *MockGroup) SetCluster(cluster string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCluster", cluster)
}

// SetCluster indicates an expected call of SetCluster.
func (mr *MockGroupMockRecorder) SetCluster(cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCluster", reflect.TypeOf((*MockGroup)(nil).SetCluster), cluster)
}

// SetConditions mocks base method.
func (m *MockGroup) SetConditions(arg0 []v1.Condition) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConditions", arg0)
}

// SetConditions indicates an expected call of SetConditions.
func (mr *MockGroupMockRecorder) SetConditions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConditions", reflect.TypeOf((*MockGroup)(nil).SetConditions), arg0)
}

// SetCreationTimestamp mocks base method.
func (m *MockGroup) SetCreationTimestamp(timestamp v1.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCreationTimestamp", timestamp)
}

// SetCreationTimestamp indicates an expected call of SetCreationTimestamp.
func (mr *MockGroupMockRecorder) SetCreationTimestamp(timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCreationTimestamp", reflect.TypeOf((*MockGroup)(nil).SetCreationTimestamp), timestamp)
}

// SetDeletionGracePeriodSeconds mocks base method.
func (m *MockGroup) SetDeletionGracePeriodSeconds(arg0 *int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDeletionGracePeriodSeconds", arg0)
}

// SetDeletionGracePeriodSeconds indicates an expected call of SetDeletionGracePeriodSeconds.
func (mr *MockGroupMockRecorder) SetDeletionGracePeriodSeconds(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeletionGracePeriodSeconds", reflect.TypeOf((*MockGroup)(nil).SetDeletionGracePeriodSeconds), arg0)
}

// SetDeletionTimestamp mocks base method.
func (m *MockGroup) SetDeletionTimestamp(timestamp *v1.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDeletionTimestamp", timestamp)
}

// SetDeletionTimestamp indicates an expected call of SetDeletionTimestamp.
func (mr *MockGroupMockRecorder) SetDeletionTimestamp(timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeletionTimestamp", reflect.TypeOf((*MockGroup)(nil).SetDeletionTimestamp), timestamp)
}

// SetFinalizers mocks base method.
func (m *MockGroup) SetFinalizers(finalizers []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFinalizers", finalizers)
}

// SetFinalizers indicates an expected call of SetFinalizers.
func (mr *MockGroupMockRecorder) SetFinalizers(finalizers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinalizers", reflect.TypeOf((*MockGroup)(nil).SetFinalizers), finalizers)
}

// SetGenerateName mocks base method.
func (m *MockGroup) SetGenerateName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGenerateName", name)
}

// SetGenerateName indicates an expected call of SetGenerateName.
func (mr *MockGroupMockRecorder) SetGenerateName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGenerateName", reflect.TypeOf((*MockGroup)(nil).SetGenerateName), name)
}

// SetGeneration mocks base method.
func (m *MockGroup) SetGeneration(generation int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGeneration", generation)
}

// SetGeneration indicates an expected call of SetGeneration.
func (mr *MockGroupMockRecorder) SetGeneration(generation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGeneration", reflect.TypeOf((*MockGroup)(nil).SetGeneration), generation)
}

// SetLabels mocks base method.
func (m *MockGroup) SetLabels(labels map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLabels", labels)
}

// SetLabels indicates an expected call of SetLabels.
func (mr *MockGroupMockRecorder) SetLabels(labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLabels", reflect.TypeOf((*MockGroup)(nil).SetLabels), labels)
}

// SetManagedFields mocks base method.
func (m *MockGroup) SetManagedFields(managedFields []v1.ManagedFieldsEntry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetManagedFields", managedFields)
}

// SetManagedFields indicates an expected call of SetManagedFields.
func (mr *MockGroupMockRecorder) SetManagedFields(managedFields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetManagedFields", reflect.TypeOf((*MockGroup)(nil).SetManagedFields), managedFields)
}

// SetName mocks base method.
func (m *MockGroup) SetName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetName", name)
}

// SetName indicates an expected call of SetName.
func (mr *MockGroupMockRecorder) SetName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockGroup)(nil).SetName), name)
}

// SetNamespace mocks base method.
func (m *MockGroup) SetNamespace(namespace string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNamespace", namespace)
}

// SetNamespace indicates an expected call of SetNamespace.
func (mr *MockGroupMockRecorder) SetNamespace(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNamespace", reflect.TypeOf((*MockGroup)(nil).SetNamespace), namespace)
}

// SetObservedGeneration mocks base method.
func (m *MockGroup) SetObservedGeneration(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetObservedGeneration", arg0)
}

// SetObservedGeneration indicates an expected call of SetObservedGeneration.
func (mr *MockGroupMockRecorder) SetObservedGeneration(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetObservedGeneration", reflect.TypeOf((*MockGroup)(nil).SetObservedGeneration), arg0)
}

// SetOwnerReferences mocks base method.
func (m *MockGroup) SetOwnerReferences(arg0 []v1.OwnerReference) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOwnerReferences", arg0)
}

// SetOwnerReferences indicates an expected call of SetOwnerReferences.
func (mr *MockGroupMockRecorder) SetOwnerReferences(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwnerReferences", reflect.TypeOf((*MockGroup)(nil).SetOwnerReferences), arg0)
}

// SetReplicas mocks base method.
func (m *MockGroup) SetReplicas(replicas int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReplicas", replicas)
}

// SetReplicas indicates an expected call of SetReplicas.
func (mr *MockGroupMockRecorder) SetReplicas(replicas any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReplicas", reflect.TypeOf((*MockGroup)(nil).SetReplicas), replicas)
}

// SetResourceVersion mocks base method.
func (m *MockGroup) SetResourceVersion(version string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetResourceVersion", version)
}

// SetResourceVersion indicates an expected call of SetResourceVersion.
func (mr *MockGroupMockRecorder) SetResourceVersion(version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResourceVersion", reflect.TypeOf((*MockGroup)(nil).SetResourceVersion), version)
}

// SetSelfLink mocks base method.
func (m *MockGroup) SetSelfLink(selfLink string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSelfLink", selfLink)
}

// SetSelfLink indicates an expected call of SetSelfLink.
func (mr *MockGroupMockRecorder) SetSelfLink(selfLink any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSelfLink", reflect.TypeOf((*MockGroup)(nil).SetSelfLink), selfLink)
}

// SetStatusReplicas mocks base method.
func (m *MockGroup) SetStatusReplicas(replicas, ready, update, current int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusReplicas", replicas, ready, update, current)
}

// SetStatusReplicas indicates an expected call of SetStatusReplicas.
func (mr *MockGroupMockRecorder) SetStatusReplicas(replicas, ready, update, current any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusReplicas", reflect.TypeOf((*MockGroup)(nil).SetStatusReplicas), replicas, ready, update, current)
}

// SetStatusRevision mocks base method.
func (m *MockGroup) SetStatusRevision(update, current string, collisionCount *int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusRevision", update, current, collisionCount)
}

// SetStatusRevision indicates an expected call of SetStatusRevision.
func (mr *MockGroupMockRecorder) SetStatusRevision(update, current, collisionCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusRevision", reflect.TypeOf((*MockGroup)(nil).SetStatusRevision), update, current, collisionCount)
}

// SetStatusSelector mocks base method.
func (m *MockGroup) SetStatusSelector(l string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusSelector", l)
}

// SetStatusSelector indicates an expected call of SetStatusSelector.
func (mr *MockGroupMockRecorder) SetStatusSelector(l any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusSelector", reflect.TypeOf((*MockGroup)(nil).SetStatusSelector), l)
}

// SetStatusVersion mocks base method.
func (m *MockGroup) SetStatusVersion(version string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusVersion", version)
}

// SetStatusVersion indicates an expected call of SetStatusVersion.
func (mr *MockGroupMockRecorder) SetStatusVersion(version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusVersion", reflect.TypeOf((*MockGroup)(nil).SetStatusVersion), version)
}

// SetTemplateClusterTLS mocks base method.
func (m *MockGroup) SetTemplateClusterTLS(ca, certKeyPair string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTemplateClusterTLS", ca, certKeyPair)
}

// SetTemplateClusterTLS indicates an expected call of SetTemplateClusterTLS.
func (mr *MockGroupMockRecorder) SetTemplateClusterTLS(ca, certKeyPair any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTemplateClusterTLS", reflect.TypeOf((*MockGroup)(nil).SetTemplateClusterTLS), ca, certKeyPair)
}

// SetUID mocks base method.
func (m *MockGroup) SetUID(uid types.UID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUID", uid)
}

// SetUID indicates an expected call of SetUID.
func (mr *MockGroupMockRecorder) SetUID(uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUID", reflect.TypeOf((*MockGroup)(nil).SetUID), uid)
}

// SetVersion mocks base method.
func (m *MockGroup) SetVersion(versions string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVersion", versions)
}

// SetVersion indicates an expected call of SetVersion.
func (mr *MockGroupMockRecorder) SetVersion(versions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVersion", reflect.TypeOf((*MockGroup)(nil).SetVersion), versions)
}

// StatusReplicas mocks base method.
func (m *MockGroup) StatusReplicas() (int32, int32, int32, int32) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusReplicas")
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(int32)
	ret3, _ := ret[3].(int32)
	return ret0, ret1, ret2, ret3
}

// StatusReplicas indicates an expected call of StatusReplicas.
func (mr *MockGroupMockRecorder) StatusReplicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusReplicas", reflect.TypeOf((*MockGroup)(nil).StatusReplicas))
}

// StatusRevision mocks base method.
func (m *MockGroup) StatusRevision() (string, string, *int32) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusRevision")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(*int32)
	return ret0, ret1, ret2
}

// StatusRevision indicates an expected call of StatusRevision.
func (mr *MockGroupMockRecorder) StatusRevision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusRevision", reflect.TypeOf((*MockGroup)(nil).StatusRevision))
}

// StatusSelector mocks base method.
func (m *MockGroup) StatusSelector() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusSelector")
	ret0, _ := ret[0].(string)
	return ret0
}

// StatusSelector indicates an expected call of StatusSelector.
func (mr *MockGroupMockRecorder) StatusSelector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusSelector", reflect.TypeOf((*MockGroup)(nil).StatusSelector))
}

// StatusVersion mocks base method.
func (m *MockGroup) StatusVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// StatusVersion indicates an expected call of StatusVersion.
func (mr *MockGroupMockRecorder) StatusVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusVersion", reflect.TypeOf((*MockGroup)(nil).StatusVersion))
}

// TemplateAnnotations mocks base method.
func (m *MockGroup) TemplateAnnotations() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateAnnotations")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// TemplateAnnotations indicates an expected call of TemplateAnnotations.
func (mr *MockGroupMockRecorder) TemplateAnnotations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateAnnotations", reflect.TypeOf((*MockGroup)(nil).TemplateAnnotations))
}

// TemplateLabels mocks base method.
func (m *MockGroup) TemplateLabels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateLabels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// TemplateLabels indicates an expected call of TemplateLabels.
func (mr *MockGroupMockRecorder) TemplateLabels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateLabels", reflect.TypeOf((*MockGroup)(nil).TemplateLabels))
}

// Version mocks base method.
func (m *MockGroup) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockGroupMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockGroup)(nil).Version))
}
