//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Copyright 2024 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by runtime-gen. DO NOT EDIT.

package runtime

import (
	"unsafe"

	"github.com/pingcap/tidb-operator/api/v2/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

type (
	Scheduler v1alpha1.Scheduler
)

type SchedulerTuple struct{}

var _ InstanceTuple[*v1alpha1.Scheduler, *Scheduler] = SchedulerTuple{}

func (SchedulerTuple) From(t *v1alpha1.Scheduler) *Scheduler {
	return FromScheduler(t)
}

func (SchedulerTuple) FromSlice(t []*v1alpha1.Scheduler) []*Scheduler {
	return FromSchedulerSlice(t)
}

func (SchedulerTuple) To(t *Scheduler) *v1alpha1.Scheduler {
	return ToScheduler(t)
}

func (SchedulerTuple) ToSlice(t []*Scheduler) []*v1alpha1.Scheduler {
	return ToSchedulerSlice(t)
}

func FromScheduler(in *v1alpha1.Scheduler) *Scheduler {
	return (*Scheduler)(in)
}

func ToScheduler(in *Scheduler) *v1alpha1.Scheduler {
	return (*v1alpha1.Scheduler)(in)
}

func FromSchedulerSlice(ins []*v1alpha1.Scheduler) []*Scheduler {
	return *(*[]*Scheduler)(unsafe.Pointer(&ins))
}

func ToSchedulerSlice(ins []*Scheduler) []*v1alpha1.Scheduler {
	return *(*[]*v1alpha1.Scheduler)(unsafe.Pointer(&ins))
}

var _ Instance = &Scheduler{}

func (in *Scheduler) DeepCopyObject() runtime.Object {
	return (*v1alpha1.Scheduler)(in).DeepCopyObject()
}

func (in *Scheduler) To() *v1alpha1.Scheduler {
	return ToScheduler(in)
}

func (in *Scheduler) GetTopology() v1alpha1.Topology {
	return in.Spec.Topology
}

func (in *Scheduler) SetTopology(t v1alpha1.Topology) {
	in.Spec.Topology = t
}

func (in *Scheduler) GetUpdateRevision() string {
	if in.Labels == nil {
		return ""
	}
	return in.Labels[v1alpha1.LabelKeyInstanceRevisionHash]
}

func (in *Scheduler) CurrentRevision() string {
	return in.Status.CurrentRevision
}

func (in *Scheduler) SetCurrentRevision(rev string) {
	in.Status.CurrentRevision = rev
}

func (in *Scheduler) IsReady() bool {
	cond := meta.FindStatusCondition(in.Status.Conditions, v1alpha1.CondReady)
	if cond == nil {
		return false
	}
	if cond.ObservedGeneration != in.GetGeneration() {
		return false
	}
	return cond.Status == metav1.ConditionTrue
}

func (in *Scheduler) IsUpToDate() bool {
	return in.Status.ObservedGeneration == in.GetGeneration() && in.GetUpdateRevision() == in.Status.CurrentRevision
}

func (in *Scheduler) Conditions() []metav1.Condition {
	return in.Status.Conditions
}

func (in *Scheduler) SetConditions(conds []metav1.Condition) {
	in.Status.Conditions = conds
}

func (in *Scheduler) ObservedGeneration() int64 {
	return in.Status.ObservedGeneration
}

func (in *Scheduler) SetObservedGeneration(gen int64) {
	in.Status.ObservedGeneration = gen
}

func (in *Scheduler) SetCluster(cluster string) {
	in.Spec.Cluster.Name = cluster
}

func (in *Scheduler) Cluster() string {
	return in.Spec.Cluster.Name
}

func (*Scheduler) Component() string {
	return v1alpha1.LabelValComponentScheduler
}

func (in *Scheduler) PodOverlay() *v1alpha1.PodOverlay {
	if in.Spec.Overlay == nil {
		return nil
	}
	return in.Spec.Overlay.Pod
}

type (
	SchedulerGroup v1alpha1.SchedulerGroup
)

type SchedulerGroupTuple struct{}

var _ GroupTuple[*v1alpha1.SchedulerGroup, *SchedulerGroup] = SchedulerGroupTuple{}

func (SchedulerGroupTuple) From(t *v1alpha1.SchedulerGroup) *SchedulerGroup {
	return FromSchedulerGroup(t)
}

func (SchedulerGroupTuple) FromSlice(t []*v1alpha1.SchedulerGroup) []*SchedulerGroup {
	return FromSchedulerGroupSlice(t)
}

func (SchedulerGroupTuple) To(t *SchedulerGroup) *v1alpha1.SchedulerGroup {
	return ToSchedulerGroup(t)
}

func (SchedulerGroupTuple) ToSlice(t []*SchedulerGroup) []*v1alpha1.SchedulerGroup {
	return ToSchedulerGroupSlice(t)
}

func FromSchedulerGroup(g *v1alpha1.SchedulerGroup) *SchedulerGroup {
	return (*SchedulerGroup)(g)
}

func ToSchedulerGroup(g *SchedulerGroup) *v1alpha1.SchedulerGroup {
	return (*v1alpha1.SchedulerGroup)(g)
}

func FromSchedulerGroupSlice(gs []*v1alpha1.SchedulerGroup) []*SchedulerGroup {
	return *(*[]*SchedulerGroup)(unsafe.Pointer(&gs))
}

func ToSchedulerGroupSlice(gs []*SchedulerGroup) []*v1alpha1.SchedulerGroup {
	return *(*[]*v1alpha1.SchedulerGroup)(unsafe.Pointer(&gs))
}

var _ Group = &SchedulerGroup{}

func (g *SchedulerGroup) DeepCopyObject() runtime.Object {
	return (*v1alpha1.SchedulerGroup)(g)
}

func (g *SchedulerGroup) To() *v1alpha1.SchedulerGroup {
	return ToSchedulerGroup(g)
}

func (g *SchedulerGroup) SetReplicas(replicas int32) {
	g.Spec.Replicas = &replicas
}

func (g *SchedulerGroup) Replicas() int32 {
	if g.Spec.Replicas == nil {
		return 1
	}
	return *g.Spec.Replicas
}

func (g *SchedulerGroup) SetVersion(version string) {
	g.Spec.Template.Spec.Version = version
}

func (g *SchedulerGroup) Version() string {
	return g.Spec.Template.Spec.Version
}

func (g *SchedulerGroup) SetCluster(cluster string) {
	g.Spec.Cluster.Name = cluster
}

func (g *SchedulerGroup) Cluster() string {
	return g.Spec.Cluster.Name
}

func (*SchedulerGroup) Component() string {
	return v1alpha1.LabelValComponentScheduler
}

func (g *SchedulerGroup) Conditions() []metav1.Condition {
	return g.Status.Conditions
}

func (g *SchedulerGroup) SetConditions(conds []metav1.Condition) {
	g.Status.Conditions = conds
}

func (g *SchedulerGroup) ObservedGeneration() int64 {
	return g.Status.ObservedGeneration
}

func (g *SchedulerGroup) SetObservedGeneration(gen int64) {
	g.Status.ObservedGeneration = gen
}

func (g *SchedulerGroup) SetStatusVersion(version string) {
	g.Status.Version = version
}

func (g *SchedulerGroup) StatusVersion() string {
	return g.Status.Version
}

func (g *SchedulerGroup) SetStatusReplicas(replicas, ready, update, current int32) {
	g.Status.Replicas = replicas
	g.Status.ReadyReplicas = ready
	g.Status.UpdatedReplicas = update
	g.Status.CurrentReplicas = current
}

func (g *SchedulerGroup) StatusReplicas() (replicas, ready, update, current int32) {
	return g.Status.Replicas,
		g.Status.ReadyReplicas,
		g.Status.UpdatedReplicas,
		g.Status.CurrentReplicas
}

func (g *SchedulerGroup) SetStatusRevision(update, current string, collisionCount *int32) {
	g.Status.UpdateRevision = update
	g.Status.CurrentRevision = current
	g.Status.CollisionCount = collisionCount
}

func (g *SchedulerGroup) StatusRevision() (update, current string, collisionCount *int32) {
	return g.Status.UpdateRevision,
		g.Status.CurrentRevision,
		g.Status.CollisionCount
}

func (g *SchedulerGroup) SetStatusSelector(l string) {
	g.Status.Selector = l
}

func (g *SchedulerGroup) StatusSelector() string {
	return g.Status.Selector
}

func (g *SchedulerGroup) TemplateLabels() map[string]string {
	return g.Spec.Template.Labels
}

func (g *SchedulerGroup) TemplateAnnotations() map[string]string {
	return g.Spec.Template.Annotations
}
