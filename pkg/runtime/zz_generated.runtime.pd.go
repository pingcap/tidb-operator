//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Copyright 2024 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by runtime-gen. DO NOT EDIT.

package runtime

import (
	"unsafe"

	"github.com/pingcap/tidb-operator/api/v2/core/v1alpha1"
	metav1alpha1 "github.com/pingcap/tidb-operator/api/v2/meta/v1alpha1"
	"k8s.io/apimachinery/pkg/api/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

type (
	PD v1alpha1.PD
)

type PDTuple struct{}

var _ InstanceTuple[*v1alpha1.PD, *PD] = PDTuple{}

func (PDTuple) From(t *v1alpha1.PD) *PD {
	return FromPD(t)
}

func (PDTuple) FromSlice(t []*v1alpha1.PD) []*PD {
	return FromPDSlice(t)
}

func (PDTuple) To(t *PD) *v1alpha1.PD {
	return ToPD(t)
}

func (PDTuple) ToSlice(t []*PD) []*v1alpha1.PD {
	return ToPDSlice(t)
}

func FromPD(in *v1alpha1.PD) *PD {
	return (*PD)(in)
}

func ToPD(in *PD) *v1alpha1.PD {
	return (*v1alpha1.PD)(in)
}

func FromPDSlice(ins []*v1alpha1.PD) []*PD {
	return *(*[]*PD)(unsafe.Pointer(&ins))
}

func ToPDSlice(ins []*PD) []*v1alpha1.PD {
	return *(*[]*v1alpha1.PD)(unsafe.Pointer(&ins))
}

var _ Instance = &PD{}

func (in *PD) DeepCopyObject() runtime.Object {
	return (*v1alpha1.PD)(in).DeepCopyObject()
}

func (in *PD) To() *v1alpha1.PD {
	return ToPD(in)
}

func (in *PD) GetTopology() v1alpha1.Topology {
	return in.Spec.Topology
}

func (in *PD) SetTopology(t v1alpha1.Topology) {
	in.Spec.Topology = t
}

func (in *PD) GetUpdateRevision() string {
	if in.Labels == nil {
		return ""
	}
	return in.Labels[v1alpha1.LabelKeyInstanceRevisionHash]
}

func (in *PD) CurrentRevision() string {
	return in.Status.CurrentRevision
}

func (in *PD) SetCurrentRevision(rev string) {
	in.Status.CurrentRevision = rev
}

func (in *PD) IsReady() bool {
	cond := meta.FindStatusCondition(in.Status.Conditions, v1alpha1.CondReady)
	if cond == nil {
		return false
	}
	if cond.ObservedGeneration != in.GetGeneration() {
		return false
	}
	return cond.Status == metav1.ConditionTrue
}

func (in *PD) IsUpToDate() bool {
	return in.Status.ObservedGeneration == in.GetGeneration() && in.GetUpdateRevision() == in.Status.CurrentRevision
}

func (in *PD) Conditions() []metav1.Condition {
	return in.Status.Conditions
}

func (in *PD) SetConditions(conds []metav1.Condition) {
	in.Status.Conditions = conds
}

func (in *PD) ObservedGeneration() int64 {
	return in.Status.ObservedGeneration
}

func (in *PD) SetObservedGeneration(gen int64) {
	in.Status.ObservedGeneration = gen
}

func (in *PD) SetCluster(cluster string) {
	in.Spec.Cluster.Name = cluster
}

func (in *PD) Cluster() string {
	return in.Spec.Cluster.Name
}

func (*PD) Component() string {
	return v1alpha1.LabelValComponentPD
}

func (in *PD) PodOverlay() *v1alpha1.PodOverlay {
	if in.Spec.Overlay == nil {
		return nil
	}
	return in.Spec.Overlay.Pod
}

func (in *PD) Features() []metav1alpha1.Feature {
	return in.Spec.Features
}

func (in *PD) SetVersion(version string) {
	in.Spec.Version = version
}

func (in *PD) Version() string {
	return in.Spec.Version
}

type (
	PDGroup v1alpha1.PDGroup
)

type PDGroupTuple struct{}

var _ GroupTuple[*v1alpha1.PDGroup, *PDGroup] = PDGroupTuple{}

func (PDGroupTuple) From(t *v1alpha1.PDGroup) *PDGroup {
	return FromPDGroup(t)
}

func (PDGroupTuple) FromSlice(t []*v1alpha1.PDGroup) []*PDGroup {
	return FromPDGroupSlice(t)
}

func (PDGroupTuple) To(t *PDGroup) *v1alpha1.PDGroup {
	return ToPDGroup(t)
}

func (PDGroupTuple) ToSlice(t []*PDGroup) []*v1alpha1.PDGroup {
	return ToPDGroupSlice(t)
}

func FromPDGroup(g *v1alpha1.PDGroup) *PDGroup {
	return (*PDGroup)(g)
}

func ToPDGroup(g *PDGroup) *v1alpha1.PDGroup {
	return (*v1alpha1.PDGroup)(g)
}

func FromPDGroupSlice(gs []*v1alpha1.PDGroup) []*PDGroup {
	return *(*[]*PDGroup)(unsafe.Pointer(&gs))
}

func ToPDGroupSlice(gs []*PDGroup) []*v1alpha1.PDGroup {
	return *(*[]*v1alpha1.PDGroup)(unsafe.Pointer(&gs))
}

var _ Group = &PDGroup{}

func (g *PDGroup) DeepCopyObject() runtime.Object {
	return (*v1alpha1.PDGroup)(g)
}

func (g *PDGroup) To() *v1alpha1.PDGroup {
	return ToPDGroup(g)
}

func (g *PDGroup) SetReplicas(replicas int32) {
	g.Spec.Replicas = &replicas
}

func (g *PDGroup) Replicas() int32 {
	if g.Spec.Replicas == nil {
		return 1
	}
	return *g.Spec.Replicas
}

func (g *PDGroup) SetVersion(version string) {
	g.Spec.Template.Spec.Version = version
}

func (g *PDGroup) Version() string {
	return g.Spec.Template.Spec.Version
}

func (g *PDGroup) SetCluster(cluster string) {
	g.Spec.Cluster.Name = cluster
}

func (g *PDGroup) Cluster() string {
	return g.Spec.Cluster.Name
}

func (*PDGroup) Component() string {
	return v1alpha1.LabelValComponentPD
}

func (g *PDGroup) Conditions() []metav1.Condition {
	return g.Status.Conditions
}

func (g *PDGroup) SetConditions(conds []metav1.Condition) {
	g.Status.Conditions = conds
}

func (g *PDGroup) ObservedGeneration() int64 {
	return g.Status.ObservedGeneration
}

func (g *PDGroup) SetObservedGeneration(gen int64) {
	g.Status.ObservedGeneration = gen
}

func (g *PDGroup) SetStatusVersion(version string) {
	g.Status.Version = version
}

func (g *PDGroup) StatusVersion() string {
	return g.Status.Version
}

func (g *PDGroup) SetStatusReplicas(replicas, ready, update, current int32) {
	g.Status.Replicas = replicas
	g.Status.ReadyReplicas = ready
	g.Status.UpdatedReplicas = update
	g.Status.CurrentReplicas = current
}

func (g *PDGroup) StatusReplicas() (replicas, ready, update, current int32) {
	return g.Status.Replicas,
		g.Status.ReadyReplicas,
		g.Status.UpdatedReplicas,
		g.Status.CurrentReplicas
}

func (g *PDGroup) SetStatusRevision(update, current string, collisionCount *int32) {
	g.Status.UpdateRevision = update
	g.Status.CurrentRevision = current
	g.Status.CollisionCount = collisionCount
}

func (g *PDGroup) StatusRevision() (update, current string, collisionCount *int32) {
	return g.Status.UpdateRevision,
		g.Status.CurrentRevision,
		g.Status.CollisionCount
}

func (g *PDGroup) SetStatusSelector(l string) {
	g.Status.Selector = l
}

func (g *PDGroup) StatusSelector() string {
	return g.Status.Selector
}

func (g *PDGroup) TemplateLabels() map[string]string {
	return g.Spec.Template.Labels
}

func (g *PDGroup) TemplateAnnotations() map[string]string {
	return g.Spec.Template.Annotations
}

func (g *PDGroup) Features() []metav1alpha1.Feature {
	return g.Spec.Features
}
