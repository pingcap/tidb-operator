// Copyright 2024 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tidb-operator/pkg/runtime (interfaces: Instance)

// Package runtime is a generated GoMock package.
package runtime

import (
	reflect "reflect"

	v1alpha1 "github.com/pingcap/tidb-operator/api/v2/core/v1alpha1"
	v1alpha10 "github.com/pingcap/tidb-operator/api/v2/meta/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
)

// MockInstance is a mock of Instance interface.
type MockInstance struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceMockRecorder
	isgomock struct{}
}

// MockInstanceMockRecorder is the mock recorder for MockInstance.
type MockInstanceMockRecorder struct {
	mock *MockInstance
}

// NewMockInstance creates a new mock instance.
func NewMockInstance(ctrl *gomock.Controller) *MockInstance {
	mock := &MockInstance{ctrl: ctrl}
	mock.recorder = &MockInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstance) EXPECT() *MockInstanceMockRecorder {
	return m.recorder
}

// ClientCASecretName mocks base method.
func (m *MockInstance) ClientCASecretName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientCASecretName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClientCASecretName indicates an expected call of ClientCASecretName.
func (mr *MockInstanceMockRecorder) ClientCASecretName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientCASecretName", reflect.TypeOf((*MockInstance)(nil).ClientCASecretName))
}

// ClientCertKeyPairSecretName mocks base method.
func (m *MockInstance) ClientCertKeyPairSecretName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientCertKeyPairSecretName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClientCertKeyPairSecretName indicates an expected call of ClientCertKeyPairSecretName.
func (mr *MockInstanceMockRecorder) ClientCertKeyPairSecretName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientCertKeyPairSecretName", reflect.TypeOf((*MockInstance)(nil).ClientCertKeyPairSecretName))
}

// ClientInsecureSkipTLSVerify mocks base method.
func (m *MockInstance) ClientInsecureSkipTLSVerify() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientInsecureSkipTLSVerify")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ClientInsecureSkipTLSVerify indicates an expected call of ClientInsecureSkipTLSVerify.
func (mr *MockInstanceMockRecorder) ClientInsecureSkipTLSVerify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientInsecureSkipTLSVerify", reflect.TypeOf((*MockInstance)(nil).ClientInsecureSkipTLSVerify))
}

// Cluster mocks base method.
func (m *MockInstance) Cluster() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster")
	ret0, _ := ret[0].(string)
	return ret0
}

// Cluster indicates an expected call of Cluster.
func (mr *MockInstanceMockRecorder) Cluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockInstance)(nil).Cluster))
}

// ClusterCASecretName mocks base method.
func (m *MockInstance) ClusterCASecretName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterCASecretName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClusterCASecretName indicates an expected call of ClusterCASecretName.
func (mr *MockInstanceMockRecorder) ClusterCASecretName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterCASecretName", reflect.TypeOf((*MockInstance)(nil).ClusterCASecretName))
}

// ClusterCertKeyPairSecretName mocks base method.
func (m *MockInstance) ClusterCertKeyPairSecretName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterCertKeyPairSecretName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClusterCertKeyPairSecretName indicates an expected call of ClusterCertKeyPairSecretName.
func (mr *MockInstanceMockRecorder) ClusterCertKeyPairSecretName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterCertKeyPairSecretName", reflect.TypeOf((*MockInstance)(nil).ClusterCertKeyPairSecretName))
}

// Component mocks base method.
func (m *MockInstance) Component() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Component")
	ret0, _ := ret[0].(string)
	return ret0
}

// Component indicates an expected call of Component.
func (mr *MockInstanceMockRecorder) Component() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Component", reflect.TypeOf((*MockInstance)(nil).Component))
}

// Conditions mocks base method.
func (m *MockInstance) Conditions() []v1.Condition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conditions")
	ret0, _ := ret[0].([]v1.Condition)
	return ret0
}

// Conditions indicates an expected call of Conditions.
func (mr *MockInstanceMockRecorder) Conditions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conditions", reflect.TypeOf((*MockInstance)(nil).Conditions))
}

// CurrentRevision mocks base method.
func (m *MockInstance) CurrentRevision() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentRevision")
	ret0, _ := ret[0].(string)
	return ret0
}

// CurrentRevision indicates an expected call of CurrentRevision.
func (mr *MockInstanceMockRecorder) CurrentRevision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentRevision", reflect.TypeOf((*MockInstance)(nil).CurrentRevision))
}

// Features mocks base method.
func (m *MockInstance) Features() []v1alpha10.Feature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features")
	ret0, _ := ret[0].([]v1alpha10.Feature)
	return ret0
}

// Features indicates an expected call of Features.
func (mr *MockInstanceMockRecorder) Features() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockInstance)(nil).Features))
}

// GetAnnotations mocks base method.
func (m *MockInstance) GetAnnotations() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotations")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetAnnotations indicates an expected call of GetAnnotations.
func (mr *MockInstanceMockRecorder) GetAnnotations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotations", reflect.TypeOf((*MockInstance)(nil).GetAnnotations))
}

// GetCreationTimestamp mocks base method.
func (m *MockInstance) GetCreationTimestamp() v1.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreationTimestamp")
	ret0, _ := ret[0].(v1.Time)
	return ret0
}

// GetCreationTimestamp indicates an expected call of GetCreationTimestamp.
func (mr *MockInstanceMockRecorder) GetCreationTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreationTimestamp", reflect.TypeOf((*MockInstance)(nil).GetCreationTimestamp))
}

// GetDeletionGracePeriodSeconds mocks base method.
func (m *MockInstance) GetDeletionGracePeriodSeconds() *int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletionGracePeriodSeconds")
	ret0, _ := ret[0].(*int64)
	return ret0
}

// GetDeletionGracePeriodSeconds indicates an expected call of GetDeletionGracePeriodSeconds.
func (mr *MockInstanceMockRecorder) GetDeletionGracePeriodSeconds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletionGracePeriodSeconds", reflect.TypeOf((*MockInstance)(nil).GetDeletionGracePeriodSeconds))
}

// GetDeletionTimestamp mocks base method.
func (m *MockInstance) GetDeletionTimestamp() *v1.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletionTimestamp")
	ret0, _ := ret[0].(*v1.Time)
	return ret0
}

// GetDeletionTimestamp indicates an expected call of GetDeletionTimestamp.
func (mr *MockInstanceMockRecorder) GetDeletionTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletionTimestamp", reflect.TypeOf((*MockInstance)(nil).GetDeletionTimestamp))
}

// GetFinalizers mocks base method.
func (m *MockInstance) GetFinalizers() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalizers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetFinalizers indicates an expected call of GetFinalizers.
func (mr *MockInstanceMockRecorder) GetFinalizers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalizers", reflect.TypeOf((*MockInstance)(nil).GetFinalizers))
}

// GetGenerateName mocks base method.
func (m *MockInstance) GetGenerateName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenerateName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGenerateName indicates an expected call of GetGenerateName.
func (mr *MockInstanceMockRecorder) GetGenerateName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenerateName", reflect.TypeOf((*MockInstance)(nil).GetGenerateName))
}

// GetGeneration mocks base method.
func (m *MockInstance) GetGeneration() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeneration")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetGeneration indicates an expected call of GetGeneration.
func (mr *MockInstanceMockRecorder) GetGeneration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeneration", reflect.TypeOf((*MockInstance)(nil).GetGeneration))
}

// GetLabels mocks base method.
func (m *MockInstance) GetLabels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetLabels indicates an expected call of GetLabels.
func (mr *MockInstanceMockRecorder) GetLabels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabels", reflect.TypeOf((*MockInstance)(nil).GetLabels))
}

// GetManagedFields mocks base method.
func (m *MockInstance) GetManagedFields() []v1.ManagedFieldsEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagedFields")
	ret0, _ := ret[0].([]v1.ManagedFieldsEntry)
	return ret0
}

// GetManagedFields indicates an expected call of GetManagedFields.
func (mr *MockInstanceMockRecorder) GetManagedFields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagedFields", reflect.TypeOf((*MockInstance)(nil).GetManagedFields))
}

// GetName mocks base method.
func (m *MockInstance) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockInstanceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockInstance)(nil).GetName))
}

// GetNamespace mocks base method.
func (m *MockInstance) GetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockInstanceMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockInstance)(nil).GetNamespace))
}

// GetOwnerReferences mocks base method.
func (m *MockInstance) GetOwnerReferences() []v1.OwnerReference {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnerReferences")
	ret0, _ := ret[0].([]v1.OwnerReference)
	return ret0
}

// GetOwnerReferences indicates an expected call of GetOwnerReferences.
func (mr *MockInstanceMockRecorder) GetOwnerReferences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnerReferences", reflect.TypeOf((*MockInstance)(nil).GetOwnerReferences))
}

// GetResourceVersion mocks base method.
func (m *MockInstance) GetResourceVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetResourceVersion indicates an expected call of GetResourceVersion.
func (mr *MockInstanceMockRecorder) GetResourceVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceVersion", reflect.TypeOf((*MockInstance)(nil).GetResourceVersion))
}

// GetSelfLink mocks base method.
func (m *MockInstance) GetSelfLink() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelfLink")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSelfLink indicates an expected call of GetSelfLink.
func (mr *MockInstanceMockRecorder) GetSelfLink() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelfLink", reflect.TypeOf((*MockInstance)(nil).GetSelfLink))
}

// GetTopology mocks base method.
func (m *MockInstance) GetTopology() v1alpha1.Topology {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopology")
	ret0, _ := ret[0].(v1alpha1.Topology)
	return ret0
}

// GetTopology indicates an expected call of GetTopology.
func (mr *MockInstanceMockRecorder) GetTopology() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopology", reflect.TypeOf((*MockInstance)(nil).GetTopology))
}

// GetUID mocks base method.
func (m *MockInstance) GetUID() types.UID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUID")
	ret0, _ := ret[0].(types.UID)
	return ret0
}

// GetUID indicates an expected call of GetUID.
func (mr *MockInstanceMockRecorder) GetUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUID", reflect.TypeOf((*MockInstance)(nil).GetUID))
}

// GetUpdateRevision mocks base method.
func (m *MockInstance) GetUpdateRevision() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateRevision")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUpdateRevision indicates an expected call of GetUpdateRevision.
func (mr *MockInstanceMockRecorder) GetUpdateRevision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateRevision", reflect.TypeOf((*MockInstance)(nil).GetUpdateRevision))
}

// IsOffline mocks base method.
func (m *MockInstance) IsOffline() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOffline")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOffline indicates an expected call of IsOffline.
func (mr *MockInstanceMockRecorder) IsOffline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOffline", reflect.TypeOf((*MockInstance)(nil).IsOffline))
}

// IsReady mocks base method.
func (m *MockInstance) IsReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockInstanceMockRecorder) IsReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockInstance)(nil).IsReady))
}

// IsStore mocks base method.
func (m *MockInstance) IsStore() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStore")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStore indicates an expected call of IsStore.
func (mr *MockInstanceMockRecorder) IsStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStore", reflect.TypeOf((*MockInstance)(nil).IsStore))
}

// IsUpToDate mocks base method.
func (m *MockInstance) IsUpToDate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUpToDate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUpToDate indicates an expected call of IsUpToDate.
func (mr *MockInstanceMockRecorder) IsUpToDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUpToDate", reflect.TypeOf((*MockInstance)(nil).IsUpToDate))
}

// ObservedGeneration mocks base method.
func (m *MockInstance) ObservedGeneration() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObservedGeneration")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ObservedGeneration indicates an expected call of ObservedGeneration.
func (mr *MockInstanceMockRecorder) ObservedGeneration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObservedGeneration", reflect.TypeOf((*MockInstance)(nil).ObservedGeneration))
}

// PodOverlay mocks base method.
func (m *MockInstance) PodOverlay() *v1alpha1.PodOverlay {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodOverlay")
	ret0, _ := ret[0].(*v1alpha1.PodOverlay)
	return ret0
}

// PodOverlay indicates an expected call of PodOverlay.
func (mr *MockInstanceMockRecorder) PodOverlay() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodOverlay", reflect.TypeOf((*MockInstance)(nil).PodOverlay))
}

// SetAnnotations mocks base method.
func (m *MockInstance) SetAnnotations(annotations map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAnnotations", annotations)
}

// SetAnnotations indicates an expected call of SetAnnotations.
func (mr *MockInstanceMockRecorder) SetAnnotations(annotations any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAnnotations", reflect.TypeOf((*MockInstance)(nil).SetAnnotations), annotations)
}

// SetCluster mocks base method.
func (m *MockInstance) SetCluster(cluster string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCluster", cluster)
}

// SetCluster indicates an expected call of SetCluster.
func (mr *MockInstanceMockRecorder) SetCluster(cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCluster", reflect.TypeOf((*MockInstance)(nil).SetCluster), cluster)
}

// SetConditions mocks base method.
func (m *MockInstance) SetConditions(arg0 []v1.Condition) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConditions", arg0)
}

// SetConditions indicates an expected call of SetConditions.
func (mr *MockInstanceMockRecorder) SetConditions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConditions", reflect.TypeOf((*MockInstance)(nil).SetConditions), arg0)
}

// SetCreationTimestamp mocks base method.
func (m *MockInstance) SetCreationTimestamp(timestamp v1.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCreationTimestamp", timestamp)
}

// SetCreationTimestamp indicates an expected call of SetCreationTimestamp.
func (mr *MockInstanceMockRecorder) SetCreationTimestamp(timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCreationTimestamp", reflect.TypeOf((*MockInstance)(nil).SetCreationTimestamp), timestamp)
}

// SetCurrentRevision mocks base method.
func (m *MockInstance) SetCurrentRevision(rev string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentRevision", rev)
}

// SetCurrentRevision indicates an expected call of SetCurrentRevision.
func (mr *MockInstanceMockRecorder) SetCurrentRevision(rev any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentRevision", reflect.TypeOf((*MockInstance)(nil).SetCurrentRevision), rev)
}

// SetDeletionGracePeriodSeconds mocks base method.
func (m *MockInstance) SetDeletionGracePeriodSeconds(arg0 *int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDeletionGracePeriodSeconds", arg0)
}

// SetDeletionGracePeriodSeconds indicates an expected call of SetDeletionGracePeriodSeconds.
func (mr *MockInstanceMockRecorder) SetDeletionGracePeriodSeconds(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeletionGracePeriodSeconds", reflect.TypeOf((*MockInstance)(nil).SetDeletionGracePeriodSeconds), arg0)
}

// SetDeletionTimestamp mocks base method.
func (m *MockInstance) SetDeletionTimestamp(timestamp *v1.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDeletionTimestamp", timestamp)
}

// SetDeletionTimestamp indicates an expected call of SetDeletionTimestamp.
func (mr *MockInstanceMockRecorder) SetDeletionTimestamp(timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeletionTimestamp", reflect.TypeOf((*MockInstance)(nil).SetDeletionTimestamp), timestamp)
}

// SetFinalizers mocks base method.
func (m *MockInstance) SetFinalizers(finalizers []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFinalizers", finalizers)
}

// SetFinalizers indicates an expected call of SetFinalizers.
func (mr *MockInstanceMockRecorder) SetFinalizers(finalizers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinalizers", reflect.TypeOf((*MockInstance)(nil).SetFinalizers), finalizers)
}

// SetGenerateName mocks base method.
func (m *MockInstance) SetGenerateName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGenerateName", name)
}

// SetGenerateName indicates an expected call of SetGenerateName.
func (mr *MockInstanceMockRecorder) SetGenerateName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGenerateName", reflect.TypeOf((*MockInstance)(nil).SetGenerateName), name)
}

// SetGeneration mocks base method.
func (m *MockInstance) SetGeneration(generation int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGeneration", generation)
}

// SetGeneration indicates an expected call of SetGeneration.
func (mr *MockInstanceMockRecorder) SetGeneration(generation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGeneration", reflect.TypeOf((*MockInstance)(nil).SetGeneration), generation)
}

// SetLabels mocks base method.
func (m *MockInstance) SetLabels(labels map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLabels", labels)
}

// SetLabels indicates an expected call of SetLabels.
func (mr *MockInstanceMockRecorder) SetLabels(labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLabels", reflect.TypeOf((*MockInstance)(nil).SetLabels), labels)
}

// SetManagedFields mocks base method.
func (m *MockInstance) SetManagedFields(managedFields []v1.ManagedFieldsEntry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetManagedFields", managedFields)
}

// SetManagedFields indicates an expected call of SetManagedFields.
func (mr *MockInstanceMockRecorder) SetManagedFields(managedFields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetManagedFields", reflect.TypeOf((*MockInstance)(nil).SetManagedFields), managedFields)
}

// SetName mocks base method.
func (m *MockInstance) SetName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetName", name)
}

// SetName indicates an expected call of SetName.
func (mr *MockInstanceMockRecorder) SetName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockInstance)(nil).SetName), name)
}

// SetNamespace mocks base method.
func (m *MockInstance) SetNamespace(namespace string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNamespace", namespace)
}

// SetNamespace indicates an expected call of SetNamespace.
func (mr *MockInstanceMockRecorder) SetNamespace(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNamespace", reflect.TypeOf((*MockInstance)(nil).SetNamespace), namespace)
}

// SetObservedGeneration mocks base method.
func (m *MockInstance) SetObservedGeneration(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetObservedGeneration", arg0)
}

// SetObservedGeneration indicates an expected call of SetObservedGeneration.
func (mr *MockInstanceMockRecorder) SetObservedGeneration(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetObservedGeneration", reflect.TypeOf((*MockInstance)(nil).SetObservedGeneration), arg0)
}

// SetOwnerReferences mocks base method.
func (m *MockInstance) SetOwnerReferences(arg0 []v1.OwnerReference) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOwnerReferences", arg0)
}

// SetOwnerReferences indicates an expected call of SetOwnerReferences.
func (mr *MockInstanceMockRecorder) SetOwnerReferences(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwnerReferences", reflect.TypeOf((*MockInstance)(nil).SetOwnerReferences), arg0)
}

// SetResourceVersion mocks base method.
func (m *MockInstance) SetResourceVersion(version string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetResourceVersion", version)
}

// SetResourceVersion indicates an expected call of SetResourceVersion.
func (mr *MockInstanceMockRecorder) SetResourceVersion(version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResourceVersion", reflect.TypeOf((*MockInstance)(nil).SetResourceVersion), version)
}

// SetSelfLink mocks base method.
func (m *MockInstance) SetSelfLink(selfLink string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSelfLink", selfLink)
}

// SetSelfLink indicates an expected call of SetSelfLink.
func (mr *MockInstanceMockRecorder) SetSelfLink(selfLink any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSelfLink", reflect.TypeOf((*MockInstance)(nil).SetSelfLink), selfLink)
}

// SetTopology mocks base method.
func (m *MockInstance) SetTopology(topo v1alpha1.Topology) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTopology", topo)
}

// SetTopology indicates an expected call of SetTopology.
func (mr *MockInstanceMockRecorder) SetTopology(topo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTopology", reflect.TypeOf((*MockInstance)(nil).SetTopology), topo)
}

// SetUID mocks base method.
func (m *MockInstance) SetUID(uid types.UID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUID", uid)
}

// SetUID indicates an expected call of SetUID.
func (mr *MockInstanceMockRecorder) SetUID(uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUID", reflect.TypeOf((*MockInstance)(nil).SetUID), uid)
}

// SetVersion mocks base method.
func (m *MockInstance) SetVersion(versions string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVersion", versions)
}

// SetVersion indicates an expected call of SetVersion.
func (mr *MockInstanceMockRecorder) SetVersion(versions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVersion", reflect.TypeOf((*MockInstance)(nil).SetVersion), versions)
}

// Subdomain mocks base method.
func (m *MockInstance) Subdomain() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subdomain")
	ret0, _ := ret[0].(string)
	return ret0
}

// Subdomain indicates an expected call of Subdomain.
func (mr *MockInstanceMockRecorder) Subdomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subdomain", reflect.TypeOf((*MockInstance)(nil).Subdomain))
}

// Version mocks base method.
func (m *MockInstance) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockInstanceMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockInstance)(nil).Version))
}
