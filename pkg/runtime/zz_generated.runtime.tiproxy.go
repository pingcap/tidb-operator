//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Copyright 2024 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by runtime-gen. DO NOT EDIT.

package runtime

import (
	"unsafe"

	"github.com/pingcap/tidb-operator/api/v2/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

type (
	TiProxy v1alpha1.TiProxy
)

type TiProxyTuple struct{}

var _ InstanceTuple[*v1alpha1.TiProxy, *TiProxy] = TiProxyTuple{}

func (TiProxyTuple) From(t *v1alpha1.TiProxy) *TiProxy {
	return FromTiProxy(t)
}

func (TiProxyTuple) FromSlice(t []*v1alpha1.TiProxy) []*TiProxy {
	return FromTiProxySlice(t)
}

func (TiProxyTuple) To(t *TiProxy) *v1alpha1.TiProxy {
	return ToTiProxy(t)
}

func (TiProxyTuple) ToSlice(t []*TiProxy) []*v1alpha1.TiProxy {
	return ToTiProxySlice(t)
}

func FromTiProxy(in *v1alpha1.TiProxy) *TiProxy {
	return (*TiProxy)(in)
}

func ToTiProxy(in *TiProxy) *v1alpha1.TiProxy {
	return (*v1alpha1.TiProxy)(in)
}

func FromTiProxySlice(ins []*v1alpha1.TiProxy) []*TiProxy {
	return *(*[]*TiProxy)(unsafe.Pointer(&ins))
}

func ToTiProxySlice(ins []*TiProxy) []*v1alpha1.TiProxy {
	return *(*[]*v1alpha1.TiProxy)(unsafe.Pointer(&ins))
}

var _ Instance = &TiProxy{}

func (in *TiProxy) DeepCopyObject() runtime.Object {
	return (*v1alpha1.TiProxy)(in).DeepCopyObject()
}

func (in *TiProxy) To() *v1alpha1.TiProxy {
	return ToTiProxy(in)
}

func (in *TiProxy) GetTopology() v1alpha1.Topology {
	return in.Spec.Topology
}

func (in *TiProxy) SetTopology(t v1alpha1.Topology) {
	in.Spec.Topology = t
}

func (in *TiProxy) GetUpdateRevision() string {
	if in.Labels == nil {
		return ""
	}
	return in.Labels[v1alpha1.LabelKeyInstanceRevisionHash]
}

func (in *TiProxy) CurrentRevision() string {
	return in.Status.CurrentRevision
}

func (in *TiProxy) SetCurrentRevision(rev string) {
	in.Status.CurrentRevision = rev
}

func (in *TiProxy) IsReady() bool {
	cond := meta.FindStatusCondition(in.Status.Conditions, v1alpha1.CondReady)
	if cond == nil {
		return false
	}
	if cond.ObservedGeneration != in.GetGeneration() {
		return false
	}
	return cond.Status == metav1.ConditionTrue
}

func (in *TiProxy) IsUpToDate() bool {
	return in.Status.ObservedGeneration == in.GetGeneration() && in.GetUpdateRevision() == in.Status.CurrentRevision
}

func (in *TiProxy) Conditions() []metav1.Condition {
	return in.Status.Conditions
}

func (in *TiProxy) SetConditions(conds []metav1.Condition) {
	in.Status.Conditions = conds
}

func (in *TiProxy) ObservedGeneration() int64 {
	return in.Status.ObservedGeneration
}

func (in *TiProxy) SetObservedGeneration(gen int64) {
	in.Status.ObservedGeneration = gen
}

func (in *TiProxy) SetCluster(cluster string) {
	in.Spec.Cluster.Name = cluster
}

func (in *TiProxy) Cluster() string {
	return in.Spec.Cluster.Name
}

func (*TiProxy) Component() string {
	return v1alpha1.LabelValComponentTiProxy
}

func (in *TiProxy) PodOverlay() *v1alpha1.PodOverlay {
	if in.Spec.Overlay == nil {
		return nil
	}
	return in.Spec.Overlay.Pod
}

type (
	TiProxyGroup v1alpha1.TiProxyGroup
)

type TiProxyGroupTuple struct{}

var _ GroupTuple[*v1alpha1.TiProxyGroup, *TiProxyGroup] = TiProxyGroupTuple{}

func (TiProxyGroupTuple) From(t *v1alpha1.TiProxyGroup) *TiProxyGroup {
	return FromTiProxyGroup(t)
}

func (TiProxyGroupTuple) FromSlice(t []*v1alpha1.TiProxyGroup) []*TiProxyGroup {
	return FromTiProxyGroupSlice(t)
}

func (TiProxyGroupTuple) To(t *TiProxyGroup) *v1alpha1.TiProxyGroup {
	return ToTiProxyGroup(t)
}

func (TiProxyGroupTuple) ToSlice(t []*TiProxyGroup) []*v1alpha1.TiProxyGroup {
	return ToTiProxyGroupSlice(t)
}

func FromTiProxyGroup(g *v1alpha1.TiProxyGroup) *TiProxyGroup {
	return (*TiProxyGroup)(g)
}

func ToTiProxyGroup(g *TiProxyGroup) *v1alpha1.TiProxyGroup {
	return (*v1alpha1.TiProxyGroup)(g)
}

func FromTiProxyGroupSlice(gs []*v1alpha1.TiProxyGroup) []*TiProxyGroup {
	return *(*[]*TiProxyGroup)(unsafe.Pointer(&gs))
}

func ToTiProxyGroupSlice(gs []*TiProxyGroup) []*v1alpha1.TiProxyGroup {
	return *(*[]*v1alpha1.TiProxyGroup)(unsafe.Pointer(&gs))
}

var _ Group = &TiProxyGroup{}

func (g *TiProxyGroup) DeepCopyObject() runtime.Object {
	return (*v1alpha1.TiProxyGroup)(g)
}

func (g *TiProxyGroup) To() *v1alpha1.TiProxyGroup {
	return ToTiProxyGroup(g)
}

func (g *TiProxyGroup) SetReplicas(replicas int32) {
	g.Spec.Replicas = &replicas
}

func (g *TiProxyGroup) Replicas() int32 {
	if g.Spec.Replicas == nil {
		return 1
	}
	return *g.Spec.Replicas
}

func (g *TiProxyGroup) SetVersion(version string) {
	g.Spec.Template.Spec.Version = version
}

func (g *TiProxyGroup) Version() string {
	return g.Spec.Template.Spec.Version
}

func (g *TiProxyGroup) SetCluster(cluster string) {
	g.Spec.Cluster.Name = cluster
}

func (g *TiProxyGroup) Cluster() string {
	return g.Spec.Cluster.Name
}

func (*TiProxyGroup) Component() string {
	return v1alpha1.LabelValComponentTiProxy
}

func (g *TiProxyGroup) Conditions() []metav1.Condition {
	return g.Status.Conditions
}

func (g *TiProxyGroup) SetConditions(conds []metav1.Condition) {
	g.Status.Conditions = conds
}

func (g *TiProxyGroup) ObservedGeneration() int64 {
	return g.Status.ObservedGeneration
}

func (g *TiProxyGroup) SetObservedGeneration(gen int64) {
	g.Status.ObservedGeneration = gen
}

func (g *TiProxyGroup) SetStatusVersion(version string) {
	g.Status.Version = version
}

func (g *TiProxyGroup) StatusVersion() string {
	return g.Status.Version
}

func (g *TiProxyGroup) SetStatusReplicas(replicas, ready, update, current int32) {
	g.Status.Replicas = replicas
	g.Status.ReadyReplicas = ready
	g.Status.UpdatedReplicas = update
	g.Status.CurrentReplicas = current
}

func (g *TiProxyGroup) StatusReplicas() (replicas, ready, update, current int32) {
	return g.Status.Replicas,
		g.Status.ReadyReplicas,
		g.Status.UpdatedReplicas,
		g.Status.CurrentReplicas
}

func (g *TiProxyGroup) SetStatusRevision(update, current string, collisionCount *int32) {
	g.Status.UpdateRevision = update
	g.Status.CurrentRevision = current
	g.Status.CollisionCount = collisionCount
}

func (g *TiProxyGroup) StatusRevision() (update, current string, collisionCount *int32) {
	return g.Status.UpdateRevision,
		g.Status.CurrentRevision,
		g.Status.CollisionCount
}

func (g *TiProxyGroup) SetStatusSelector(l string) {
	g.Status.Selector = l
}

func (g *TiProxyGroup) StatusSelector() string {
	return g.Status.Selector
}

func (g *TiProxyGroup) TemplateLabels() map[string]string {
	return g.Spec.Template.Labels
}

func (g *TiProxyGroup) TemplateAnnotations() map[string]string {
	return g.Spec.Template.Annotations
}
