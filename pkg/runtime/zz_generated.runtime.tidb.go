//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Copyright 2024 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by runtime-gen. DO NOT EDIT.

package runtime

import (
	"unsafe"

	"github.com/pingcap/tidb-operator/api/v2/core/v1alpha1"
	metav1alpha1 "github.com/pingcap/tidb-operator/api/v2/meta/v1alpha1"
	"k8s.io/apimachinery/pkg/api/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

type (
	TiDB v1alpha1.TiDB
)

type TiDBTuple struct{}

var _ InstanceTuple[*v1alpha1.TiDB, *TiDB] = TiDBTuple{}

func (TiDBTuple) From(t *v1alpha1.TiDB) *TiDB {
	return FromTiDB(t)
}

func (TiDBTuple) FromSlice(t []*v1alpha1.TiDB) []*TiDB {
	return FromTiDBSlice(t)
}

func (TiDBTuple) To(t *TiDB) *v1alpha1.TiDB {
	return ToTiDB(t)
}

func (TiDBTuple) ToSlice(t []*TiDB) []*v1alpha1.TiDB {
	return ToTiDBSlice(t)
}

func FromTiDB(in *v1alpha1.TiDB) *TiDB {
	return (*TiDB)(in)
}

func ToTiDB(in *TiDB) *v1alpha1.TiDB {
	return (*v1alpha1.TiDB)(in)
}

func FromTiDBSlice(ins []*v1alpha1.TiDB) []*TiDB {
	return *(*[]*TiDB)(unsafe.Pointer(&ins))
}

func ToTiDBSlice(ins []*TiDB) []*v1alpha1.TiDB {
	return *(*[]*v1alpha1.TiDB)(unsafe.Pointer(&ins))
}

var _ Instance = &TiDB{}

func (in *TiDB) DeepCopyObject() runtime.Object {
	return (*v1alpha1.TiDB)(in).DeepCopyObject()
}

func (in *TiDB) To() *v1alpha1.TiDB {
	return ToTiDB(in)
}

func (in *TiDB) GetTopology() v1alpha1.Topology {
	return in.Spec.Topology
}

func (in *TiDB) SetTopology(t v1alpha1.Topology) {
	in.Spec.Topology = t
}

func (in *TiDB) GetUpdateRevision() string {
	if in.Labels == nil {
		return ""
	}
	return in.Labels[v1alpha1.LabelKeyInstanceRevisionHash]
}

func (in *TiDB) CurrentRevision() string {
	return in.Status.CurrentRevision
}

func (in *TiDB) SetCurrentRevision(rev string) {
	in.Status.CurrentRevision = rev
}

func (in *TiDB) IsReady() bool {
	cond := meta.FindStatusCondition(in.Status.Conditions, v1alpha1.CondReady)
	if cond == nil {
		return false
	}
	if cond.ObservedGeneration != in.GetGeneration() {
		return false
	}
	return cond.Status == metav1.ConditionTrue
}

func (in *TiDB) IsUpToDate() bool {
	return in.Status.ObservedGeneration == in.GetGeneration() && in.GetUpdateRevision() == in.Status.CurrentRevision
}

func (in *TiDB) Conditions() []metav1.Condition {
	return in.Status.Conditions
}

func (in *TiDB) SetConditions(conds []metav1.Condition) {
	in.Status.Conditions = conds
}

func (in *TiDB) ObservedGeneration() int64 {
	return in.Status.ObservedGeneration
}

func (in *TiDB) SetObservedGeneration(gen int64) {
	in.Status.ObservedGeneration = gen
}

func (in *TiDB) SetCluster(cluster string) {
	in.Spec.Cluster.Name = cluster
}

func (in *TiDB) Cluster() string {
	return in.Spec.Cluster.Name
}

func (*TiDB) Component() string {
	return v1alpha1.LabelValComponentTiDB
}

func (in *TiDB) PodOverlay() *v1alpha1.PodOverlay {
	if in.Spec.Overlay == nil {
		return nil
	}
	return in.Spec.Overlay.Pod
}

func (in *TiDB) Features() []metav1alpha1.Feature {
	return in.Spec.Features
}

func (in *TiDB) SetVersion(version string) {
	in.Spec.Version = version
}

func (in *TiDB) Version() string {
	return in.Spec.Version
}

type (
	TiDBGroup v1alpha1.TiDBGroup
)

type TiDBGroupTuple struct{}

var _ GroupTuple[*v1alpha1.TiDBGroup, *TiDBGroup] = TiDBGroupTuple{}

func (TiDBGroupTuple) From(t *v1alpha1.TiDBGroup) *TiDBGroup {
	return FromTiDBGroup(t)
}

func (TiDBGroupTuple) FromSlice(t []*v1alpha1.TiDBGroup) []*TiDBGroup {
	return FromTiDBGroupSlice(t)
}

func (TiDBGroupTuple) To(t *TiDBGroup) *v1alpha1.TiDBGroup {
	return ToTiDBGroup(t)
}

func (TiDBGroupTuple) ToSlice(t []*TiDBGroup) []*v1alpha1.TiDBGroup {
	return ToTiDBGroupSlice(t)
}

func FromTiDBGroup(g *v1alpha1.TiDBGroup) *TiDBGroup {
	return (*TiDBGroup)(g)
}

func ToTiDBGroup(g *TiDBGroup) *v1alpha1.TiDBGroup {
	return (*v1alpha1.TiDBGroup)(g)
}

func FromTiDBGroupSlice(gs []*v1alpha1.TiDBGroup) []*TiDBGroup {
	return *(*[]*TiDBGroup)(unsafe.Pointer(&gs))
}

func ToTiDBGroupSlice(gs []*TiDBGroup) []*v1alpha1.TiDBGroup {
	return *(*[]*v1alpha1.TiDBGroup)(unsafe.Pointer(&gs))
}

var _ Group = &TiDBGroup{}

func (g *TiDBGroup) DeepCopyObject() runtime.Object {
	return (*v1alpha1.TiDBGroup)(g)
}

func (g *TiDBGroup) To() *v1alpha1.TiDBGroup {
	return ToTiDBGroup(g)
}

func (g *TiDBGroup) SetReplicas(replicas int32) {
	g.Spec.Replicas = &replicas
}

func (g *TiDBGroup) Replicas() int32 {
	if g.Spec.Replicas == nil {
		return 1
	}
	return *g.Spec.Replicas
}

func (g *TiDBGroup) SetVersion(version string) {
	g.Spec.Template.Spec.Version = version
}

func (g *TiDBGroup) Version() string {
	return g.Spec.Template.Spec.Version
}

func (g *TiDBGroup) SetCluster(cluster string) {
	g.Spec.Cluster.Name = cluster
}

func (g *TiDBGroup) Cluster() string {
	return g.Spec.Cluster.Name
}

func (*TiDBGroup) Component() string {
	return v1alpha1.LabelValComponentTiDB
}

func (g *TiDBGroup) Conditions() []metav1.Condition {
	return g.Status.Conditions
}

func (g *TiDBGroup) SetConditions(conds []metav1.Condition) {
	g.Status.Conditions = conds
}

func (g *TiDBGroup) ObservedGeneration() int64 {
	return g.Status.ObservedGeneration
}

func (g *TiDBGroup) SetObservedGeneration(gen int64) {
	g.Status.ObservedGeneration = gen
}

func (g *TiDBGroup) SetStatusVersion(version string) {
	g.Status.Version = version
}

func (g *TiDBGroup) StatusVersion() string {
	return g.Status.Version
}

func (g *TiDBGroup) SetStatusReplicas(replicas, ready, update, current int32) {
	g.Status.Replicas = replicas
	g.Status.ReadyReplicas = ready
	g.Status.UpdatedReplicas = update
	g.Status.CurrentReplicas = current
}

func (g *TiDBGroup) StatusReplicas() (replicas, ready, update, current int32) {
	return g.Status.Replicas,
		g.Status.ReadyReplicas,
		g.Status.UpdatedReplicas,
		g.Status.CurrentReplicas
}

func (g *TiDBGroup) SetStatusRevision(update, current string, collisionCount *int32) {
	g.Status.UpdateRevision = update
	g.Status.CurrentRevision = current
	g.Status.CollisionCount = collisionCount
}

func (g *TiDBGroup) StatusRevision() (update, current string, collisionCount *int32) {
	return g.Status.UpdateRevision,
		g.Status.CurrentRevision,
		g.Status.CollisionCount
}

func (g *TiDBGroup) SetStatusSelector(l string) {
	g.Status.Selector = l
}

func (g *TiDBGroup) StatusSelector() string {
	return g.Status.Selector
}

func (g *TiDBGroup) TemplateLabels() map[string]string {
	return g.Spec.Template.Labels
}

func (g *TiDBGroup) TemplateAnnotations() map[string]string {
	return g.Spec.Template.Annotations
}

func (g *TiDBGroup) Features() []metav1alpha1.Feature {
	return g.Spec.Features
}
