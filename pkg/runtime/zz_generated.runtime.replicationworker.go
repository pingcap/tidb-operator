//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Copyright 2024 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by runtime-gen. DO NOT EDIT.

package runtime

import (
	"unsafe"

	"github.com/pingcap/tidb-operator/api/v2/core/v1alpha1"
	metav1alpha1 "github.com/pingcap/tidb-operator/api/v2/meta/v1alpha1"
	"k8s.io/apimachinery/pkg/api/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

type (
	ReplicationWorker v1alpha1.ReplicationWorker
)

type ReplicationWorkerTuple struct{}

var _ InstanceTuple[*v1alpha1.ReplicationWorker, *ReplicationWorker] = ReplicationWorkerTuple{}

func (ReplicationWorkerTuple) From(t *v1alpha1.ReplicationWorker) *ReplicationWorker {
	return FromReplicationWorker(t)
}

func (ReplicationWorkerTuple) FromSlice(t []*v1alpha1.ReplicationWorker) []*ReplicationWorker {
	return FromReplicationWorkerSlice(t)
}

func (ReplicationWorkerTuple) To(t *ReplicationWorker) *v1alpha1.ReplicationWorker {
	return ToReplicationWorker(t)
}

func (ReplicationWorkerTuple) ToSlice(t []*ReplicationWorker) []*v1alpha1.ReplicationWorker {
	return ToReplicationWorkerSlice(t)
}

func FromReplicationWorker(in *v1alpha1.ReplicationWorker) *ReplicationWorker {
	return (*ReplicationWorker)(in)
}

func ToReplicationWorker(in *ReplicationWorker) *v1alpha1.ReplicationWorker {
	return (*v1alpha1.ReplicationWorker)(in)
}

func FromReplicationWorkerSlice(ins []*v1alpha1.ReplicationWorker) []*ReplicationWorker {
	return *(*[]*ReplicationWorker)(unsafe.Pointer(&ins))
}

func ToReplicationWorkerSlice(ins []*ReplicationWorker) []*v1alpha1.ReplicationWorker {
	return *(*[]*v1alpha1.ReplicationWorker)(unsafe.Pointer(&ins))
}

var _ Instance = &ReplicationWorker{}

func (in *ReplicationWorker) DeepCopyObject() runtime.Object {
	return (*v1alpha1.ReplicationWorker)(in).DeepCopyObject()
}

func (in *ReplicationWorker) To() *v1alpha1.ReplicationWorker {
	return ToReplicationWorker(in)
}

func (in *ReplicationWorker) GetTopology() v1alpha1.Topology {
	return in.Spec.Topology
}

func (in *ReplicationWorker) SetTopology(t v1alpha1.Topology) {
	in.Spec.Topology = t
}

func (in *ReplicationWorker) GetUpdateRevision() string {
	if in.Labels == nil {
		return ""
	}
	return in.Labels[v1alpha1.LabelKeyInstanceRevisionHash]
}

func (in *ReplicationWorker) CurrentRevision() string {
	return in.Status.CurrentRevision
}

func (in *ReplicationWorker) SetCurrentRevision(rev string) {
	in.Status.CurrentRevision = rev
}

func (in *ReplicationWorker) IsReady() bool {
	cond := meta.FindStatusCondition(in.Status.Conditions, v1alpha1.CondReady)
	if cond == nil {
		return false
	}
	if cond.ObservedGeneration != in.GetGeneration() {
		return false
	}
	return cond.Status == metav1.ConditionTrue
}

func (in *ReplicationWorker) IsUpToDate() bool {
	return in.Status.ObservedGeneration == in.GetGeneration() && in.GetUpdateRevision() == in.Status.CurrentRevision
}

func (in *ReplicationWorker) Conditions() []metav1.Condition {
	return in.Status.Conditions
}

func (in *ReplicationWorker) SetConditions(conds []metav1.Condition) {
	in.Status.Conditions = conds
}

func (in *ReplicationWorker) ObservedGeneration() int64 {
	return in.Status.ObservedGeneration
}

func (in *ReplicationWorker) SetObservedGeneration(gen int64) {
	in.Status.ObservedGeneration = gen
}

func (in *ReplicationWorker) SetCluster(cluster string) {
	in.Spec.Cluster.Name = cluster
}

func (in *ReplicationWorker) Cluster() string {
	return in.Spec.Cluster.Name
}

func (*ReplicationWorker) Component() string {
	return v1alpha1.LabelValComponentReplicationWorker
}

func (in *ReplicationWorker) PodOverlay() *v1alpha1.PodOverlay {
	if in.Spec.Overlay == nil {
		return nil
	}
	return in.Spec.Overlay.Pod
}

func (in *ReplicationWorker) Features() []metav1alpha1.Feature {
	return in.Spec.Features
}

func (in *ReplicationWorker) SetVersion(version string) {
	in.Spec.Version = version
}

func (in *ReplicationWorker) Version() string {
	return in.Spec.Version
}

func (in *ReplicationWorker) Subdomain() string {
	return in.Spec.Subdomain
}

func (in *ReplicationWorker) ClusterCertKeyPairSecretName() string {
	sec := in.Spec.Security
	if sec != nil && sec.TLS != nil && sec.TLS.Cluster != nil && sec.TLS.Cluster.CertKeyPair != nil {
		return sec.TLS.Cluster.CertKeyPair.Name
	}
	prefix, _ := NamePrefixAndSuffix(in.GetName())
	return prefix + "-" + in.Component() + "-cluster-secret"
}

func (in *ReplicationWorker) ClusterCASecretName() string {
	sec := in.Spec.Security
	if sec != nil && sec.TLS != nil && sec.TLS.Cluster != nil && sec.TLS.Cluster.CA != nil {
		return sec.TLS.Cluster.CA.Name
	}
	prefix, _ := NamePrefixAndSuffix(in.GetName())
	return prefix + "-" + in.Component() + "-cluster-secret"
}

func (in *ReplicationWorker) ClientCertKeyPairSecretName() string {
	sec := in.Spec.Security
	if sec != nil && sec.TLS != nil && sec.TLS.Client != nil && sec.TLS.Client.CertKeyPair != nil {
		return sec.TLS.Client.CertKeyPair.Name
	}
	return in.Cluster() + "-cluster-client-secret"
}

func (in *ReplicationWorker) ClientCASecretName() string {
	sec := in.Spec.Security
	if sec != nil && sec.TLS != nil && sec.TLS.Client != nil && sec.TLS.Client.CA != nil {
		return sec.TLS.Client.CA.Name
	}
	return in.Cluster() + "-cluster-client-secret"
}

func (in *ReplicationWorker) ClientInsecureSkipTLSVerify() bool {
	sec := in.Spec.Security
	if sec != nil && sec.TLS != nil && sec.TLS.Client != nil && sec.TLS.Client.CA != nil {
		return sec.TLS.Client.InsecureSkipTLSVerify
	}
	return false
}

func (in *ReplicationWorker) IsOffline() bool {
	return false
}

func (in *ReplicationWorker) IsStore() bool {
	return false
}

type (
	ReplicationWorkerGroup v1alpha1.ReplicationWorkerGroup
)

type ReplicationWorkerGroupTuple struct{}

var _ GroupTuple[*v1alpha1.ReplicationWorkerGroup, *ReplicationWorkerGroup] = ReplicationWorkerGroupTuple{}

func (ReplicationWorkerGroupTuple) From(t *v1alpha1.ReplicationWorkerGroup) *ReplicationWorkerGroup {
	return FromReplicationWorkerGroup(t)
}

func (ReplicationWorkerGroupTuple) FromSlice(t []*v1alpha1.ReplicationWorkerGroup) []*ReplicationWorkerGroup {
	return FromReplicationWorkerGroupSlice(t)
}

func (ReplicationWorkerGroupTuple) To(t *ReplicationWorkerGroup) *v1alpha1.ReplicationWorkerGroup {
	return ToReplicationWorkerGroup(t)
}

func (ReplicationWorkerGroupTuple) ToSlice(t []*ReplicationWorkerGroup) []*v1alpha1.ReplicationWorkerGroup {
	return ToReplicationWorkerGroupSlice(t)
}

func FromReplicationWorkerGroup(g *v1alpha1.ReplicationWorkerGroup) *ReplicationWorkerGroup {
	return (*ReplicationWorkerGroup)(g)
}

func ToReplicationWorkerGroup(g *ReplicationWorkerGroup) *v1alpha1.ReplicationWorkerGroup {
	return (*v1alpha1.ReplicationWorkerGroup)(g)
}

func FromReplicationWorkerGroupSlice(gs []*v1alpha1.ReplicationWorkerGroup) []*ReplicationWorkerGroup {
	return *(*[]*ReplicationWorkerGroup)(unsafe.Pointer(&gs))
}

func ToReplicationWorkerGroupSlice(gs []*ReplicationWorkerGroup) []*v1alpha1.ReplicationWorkerGroup {
	return *(*[]*v1alpha1.ReplicationWorkerGroup)(unsafe.Pointer(&gs))
}

var _ Group = &ReplicationWorkerGroup{}

func (g *ReplicationWorkerGroup) DeepCopyObject() runtime.Object {
	return (*v1alpha1.ReplicationWorkerGroup)(g)
}

func (g *ReplicationWorkerGroup) To() *v1alpha1.ReplicationWorkerGroup {
	return ToReplicationWorkerGroup(g)
}

func (g *ReplicationWorkerGroup) SetReplicas(replicas int32) {
	g.Spec.Replicas = &replicas
}

func (g *ReplicationWorkerGroup) Replicas() int32 {
	if g.Spec.Replicas == nil {
		return 1
	}
	return *g.Spec.Replicas
}

func (g *ReplicationWorkerGroup) SetVersion(version string) {
	g.Spec.Template.Spec.Version = version
}

func (g *ReplicationWorkerGroup) Version() string {
	return g.Spec.Template.Spec.Version
}

func (g *ReplicationWorkerGroup) SetCluster(cluster string) {
	g.Spec.Cluster.Name = cluster
}

func (g *ReplicationWorkerGroup) Cluster() string {
	return g.Spec.Cluster.Name
}

func (*ReplicationWorkerGroup) Component() string {
	return v1alpha1.LabelValComponentReplicationWorker
}

func (g *ReplicationWorkerGroup) Conditions() []metav1.Condition {
	return g.Status.Conditions
}

func (g *ReplicationWorkerGroup) SetConditions(conds []metav1.Condition) {
	g.Status.Conditions = conds
}

func (g *ReplicationWorkerGroup) ObservedGeneration() int64 {
	return g.Status.ObservedGeneration
}

func (g *ReplicationWorkerGroup) SetObservedGeneration(gen int64) {
	g.Status.ObservedGeneration = gen
}

func (g *ReplicationWorkerGroup) SetStatusVersion(version string) {
	g.Status.Version = version
}

func (g *ReplicationWorkerGroup) StatusVersion() string {
	return g.Status.Version
}

func (g *ReplicationWorkerGroup) SetStatusReplicas(replicas, ready, update, current int32) {
	g.Status.Replicas = replicas
	g.Status.ReadyReplicas = ready
	g.Status.UpdatedReplicas = update
	g.Status.CurrentReplicas = current
}

func (g *ReplicationWorkerGroup) StatusReplicas() (replicas, ready, update, current int32) {
	return g.Status.Replicas,
		g.Status.ReadyReplicas,
		g.Status.UpdatedReplicas,
		g.Status.CurrentReplicas
}

func (g *ReplicationWorkerGroup) SetStatusRevision(update, current string, collisionCount *int32) {
	g.Status.UpdateRevision = update
	g.Status.CurrentRevision = current
	g.Status.CollisionCount = collisionCount
}

func (g *ReplicationWorkerGroup) StatusRevision() (update, current string, collisionCount *int32) {
	return g.Status.UpdateRevision,
		g.Status.CurrentRevision,
		g.Status.CollisionCount
}

func (g *ReplicationWorkerGroup) SetStatusSelector(l string) {
	g.Status.Selector = l
}

func (g *ReplicationWorkerGroup) StatusSelector() string {
	return g.Status.Selector
}

func (g *ReplicationWorkerGroup) TemplateLabels() map[string]string {
	return g.Spec.Template.Labels
}

func (g *ReplicationWorkerGroup) TemplateAnnotations() map[string]string {
	return g.Spec.Template.Annotations
}

func (g *ReplicationWorkerGroup) Features() []metav1alpha1.Feature {
	return g.Spec.Features
}

func (g *ReplicationWorkerGroup) SetTemplateClusterTLS(ca, certKeyPair string) {
	if g.Spec.Template.Spec.Security == nil {
		g.Spec.Template.Spec.Security = &v1alpha1.Security{}
	}
	sec := g.Spec.Template.Spec.Security
	if sec.TLS == nil {
		sec.TLS = &v1alpha1.ComponentTLS{}
	}
	sec.TLS.Cluster = &v1alpha1.InternalTLS{}
	if ca != "" {
		sec.TLS.Cluster.CA = &v1alpha1.CAReference{
			Name: ca,
		}
	}
	if certKeyPair != "" {
		sec.TLS.Cluster.CertKeyPair = &v1alpha1.CertKeyPairReference{
			Name: certKeyPair,
		}
	}
}

func (g *ReplicationWorkerGroup) ClusterCertKeyPairSecretName() string {
	defaultName := g.Name + "-" + g.Component() + "-cluster-secret"
	sec := g.Spec.Template.Spec.Security
	if sec != nil && sec.TLS != nil && sec.TLS.Cluster != nil && sec.TLS.Cluster.CertKeyPair != nil {
		return sec.TLS.Cluster.CertKeyPair.Name
	}
	return defaultName
}

func (g *ReplicationWorkerGroup) ClusterCASecretName() string {
	defaultName := g.Name + "-" + g.Component() + "-cluster-secret"
	sec := g.Spec.Template.Spec.Security
	if sec != nil && sec.TLS != nil && sec.TLS.Cluster != nil && sec.TLS.Cluster.CA != nil {
		return sec.TLS.Cluster.CA.Name
	}
	return defaultName
}

func (g *ReplicationWorkerGroup) ClientCertKeyPairSecretName() string {
	sec := g.Spec.Template.Spec.Security
	if sec != nil && sec.TLS != nil && sec.TLS.Client != nil && sec.TLS.Client.CertKeyPair != nil {
		return sec.TLS.Client.CertKeyPair.Name
	}
	return g.Cluster() + "-cluster-client-secret"
}

func (g *ReplicationWorkerGroup) ClientCASecretName() string {
	sec := g.Spec.Template.Spec.Security
	if sec != nil && sec.TLS != nil && sec.TLS.Client != nil && sec.TLS.Client.CA != nil {
		return sec.TLS.Client.CA.Name
	}
	return g.Cluster() + "-cluster-client-secret"
}

func (g *ReplicationWorkerGroup) ClientInsecureSkipTLSVerify() bool {
	sec := g.Spec.Template.Spec.Security
	if sec != nil && sec.TLS != nil && sec.TLS.Client != nil && sec.TLS.Client.CA != nil {
		return sec.TLS.Client.InsecureSkipTLSVerify
	}
	return false
}
