//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Copyright 2024 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by runtime-gen. DO NOT EDIT.

package runtime

import (
	"unsafe"

	"github.com/pingcap/tidb-operator/api/v2/core/v1alpha1"
	metav1alpha1 "github.com/pingcap/tidb-operator/api/v2/meta/v1alpha1"
	"k8s.io/apimachinery/pkg/api/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

type (
	TiFlash v1alpha1.TiFlash
)

type TiFlashTuple struct{}

var _ InstanceTuple[*v1alpha1.TiFlash, *TiFlash] = TiFlashTuple{}

func (TiFlashTuple) From(t *v1alpha1.TiFlash) *TiFlash {
	return FromTiFlash(t)
}

func (TiFlashTuple) FromSlice(t []*v1alpha1.TiFlash) []*TiFlash {
	return FromTiFlashSlice(t)
}

func (TiFlashTuple) To(t *TiFlash) *v1alpha1.TiFlash {
	return ToTiFlash(t)
}

func (TiFlashTuple) ToSlice(t []*TiFlash) []*v1alpha1.TiFlash {
	return ToTiFlashSlice(t)
}

func FromTiFlash(in *v1alpha1.TiFlash) *TiFlash {
	return (*TiFlash)(in)
}

func ToTiFlash(in *TiFlash) *v1alpha1.TiFlash {
	return (*v1alpha1.TiFlash)(in)
}

func FromTiFlashSlice(ins []*v1alpha1.TiFlash) []*TiFlash {
	return *(*[]*TiFlash)(unsafe.Pointer(&ins))
}

func ToTiFlashSlice(ins []*TiFlash) []*v1alpha1.TiFlash {
	return *(*[]*v1alpha1.TiFlash)(unsafe.Pointer(&ins))
}

var _ Instance = &TiFlash{}

func (in *TiFlash) DeepCopyObject() runtime.Object {
	return (*v1alpha1.TiFlash)(in).DeepCopyObject()
}

func (in *TiFlash) To() *v1alpha1.TiFlash {
	return ToTiFlash(in)
}

func (in *TiFlash) GetTopology() v1alpha1.Topology {
	return in.Spec.Topology
}

func (in *TiFlash) SetTopology(t v1alpha1.Topology) {
	in.Spec.Topology = t
}

func (in *TiFlash) GetUpdateRevision() string {
	if in.Labels == nil {
		return ""
	}
	return in.Labels[v1alpha1.LabelKeyInstanceRevisionHash]
}

func (in *TiFlash) CurrentRevision() string {
	return in.Status.CurrentRevision
}

func (in *TiFlash) SetCurrentRevision(rev string) {
	in.Status.CurrentRevision = rev
}

func (in *TiFlash) IsReady() bool {
	cond := meta.FindStatusCondition(in.Status.Conditions, v1alpha1.CondReady)
	if cond == nil {
		return false
	}
	if cond.ObservedGeneration != in.GetGeneration() {
		return false
	}
	return cond.Status == metav1.ConditionTrue
}

func (in *TiFlash) IsUpToDate() bool {
	return in.Status.ObservedGeneration == in.GetGeneration() && in.GetUpdateRevision() == in.Status.CurrentRevision
}

func (in *TiFlash) Conditions() []metav1.Condition {
	return in.Status.Conditions
}

func (in *TiFlash) SetConditions(conds []metav1.Condition) {
	in.Status.Conditions = conds
}

func (in *TiFlash) ObservedGeneration() int64 {
	return in.Status.ObservedGeneration
}

func (in *TiFlash) SetObservedGeneration(gen int64) {
	in.Status.ObservedGeneration = gen
}

func (in *TiFlash) SetCluster(cluster string) {
	in.Spec.Cluster.Name = cluster
}

func (in *TiFlash) Cluster() string {
	return in.Spec.Cluster.Name
}

func (*TiFlash) Component() string {
	return v1alpha1.LabelValComponentTiFlash
}

func (in *TiFlash) PodOverlay() *v1alpha1.PodOverlay {
	if in.Spec.Overlay == nil {
		return nil
	}
	return in.Spec.Overlay.Pod
}

func (in *TiFlash) Features() []metav1alpha1.Feature {
	return in.Spec.Features
}

func (in *TiFlash) SetVersion(version string) {
	in.Spec.Version = version
}

func (in *TiFlash) Version() string {
	return in.Spec.Version
}

type (
	TiFlashGroup v1alpha1.TiFlashGroup
)

type TiFlashGroupTuple struct{}

var _ GroupTuple[*v1alpha1.TiFlashGroup, *TiFlashGroup] = TiFlashGroupTuple{}

func (TiFlashGroupTuple) From(t *v1alpha1.TiFlashGroup) *TiFlashGroup {
	return FromTiFlashGroup(t)
}

func (TiFlashGroupTuple) FromSlice(t []*v1alpha1.TiFlashGroup) []*TiFlashGroup {
	return FromTiFlashGroupSlice(t)
}

func (TiFlashGroupTuple) To(t *TiFlashGroup) *v1alpha1.TiFlashGroup {
	return ToTiFlashGroup(t)
}

func (TiFlashGroupTuple) ToSlice(t []*TiFlashGroup) []*v1alpha1.TiFlashGroup {
	return ToTiFlashGroupSlice(t)
}

func FromTiFlashGroup(g *v1alpha1.TiFlashGroup) *TiFlashGroup {
	return (*TiFlashGroup)(g)
}

func ToTiFlashGroup(g *TiFlashGroup) *v1alpha1.TiFlashGroup {
	return (*v1alpha1.TiFlashGroup)(g)
}

func FromTiFlashGroupSlice(gs []*v1alpha1.TiFlashGroup) []*TiFlashGroup {
	return *(*[]*TiFlashGroup)(unsafe.Pointer(&gs))
}

func ToTiFlashGroupSlice(gs []*TiFlashGroup) []*v1alpha1.TiFlashGroup {
	return *(*[]*v1alpha1.TiFlashGroup)(unsafe.Pointer(&gs))
}

var _ Group = &TiFlashGroup{}

func (g *TiFlashGroup) DeepCopyObject() runtime.Object {
	return (*v1alpha1.TiFlashGroup)(g)
}

func (g *TiFlashGroup) To() *v1alpha1.TiFlashGroup {
	return ToTiFlashGroup(g)
}

func (g *TiFlashGroup) SetReplicas(replicas int32) {
	g.Spec.Replicas = &replicas
}

func (g *TiFlashGroup) Replicas() int32 {
	if g.Spec.Replicas == nil {
		return 1
	}
	return *g.Spec.Replicas
}

func (g *TiFlashGroup) SetVersion(version string) {
	g.Spec.Template.Spec.Version = version
}

func (g *TiFlashGroup) Version() string {
	return g.Spec.Template.Spec.Version
}

func (g *TiFlashGroup) SetCluster(cluster string) {
	g.Spec.Cluster.Name = cluster
}

func (g *TiFlashGroup) Cluster() string {
	return g.Spec.Cluster.Name
}

func (*TiFlashGroup) Component() string {
	return v1alpha1.LabelValComponentTiFlash
}

func (g *TiFlashGroup) Conditions() []metav1.Condition {
	return g.Status.Conditions
}

func (g *TiFlashGroup) SetConditions(conds []metav1.Condition) {
	g.Status.Conditions = conds
}

func (g *TiFlashGroup) ObservedGeneration() int64 {
	return g.Status.ObservedGeneration
}

func (g *TiFlashGroup) SetObservedGeneration(gen int64) {
	g.Status.ObservedGeneration = gen
}

func (g *TiFlashGroup) SetStatusVersion(version string) {
	g.Status.Version = version
}

func (g *TiFlashGroup) StatusVersion() string {
	return g.Status.Version
}

func (g *TiFlashGroup) SetStatusReplicas(replicas, ready, update, current int32) {
	g.Status.Replicas = replicas
	g.Status.ReadyReplicas = ready
	g.Status.UpdatedReplicas = update
	g.Status.CurrentReplicas = current
}

func (g *TiFlashGroup) StatusReplicas() (replicas, ready, update, current int32) {
	return g.Status.Replicas,
		g.Status.ReadyReplicas,
		g.Status.UpdatedReplicas,
		g.Status.CurrentReplicas
}

func (g *TiFlashGroup) SetStatusRevision(update, current string, collisionCount *int32) {
	g.Status.UpdateRevision = update
	g.Status.CurrentRevision = current
	g.Status.CollisionCount = collisionCount
}

func (g *TiFlashGroup) StatusRevision() (update, current string, collisionCount *int32) {
	return g.Status.UpdateRevision,
		g.Status.CurrentRevision,
		g.Status.CollisionCount
}

func (g *TiFlashGroup) SetStatusSelector(l string) {
	g.Status.Selector = l
}

func (g *TiFlashGroup) StatusSelector() string {
	return g.Status.Selector
}

func (g *TiFlashGroup) TemplateLabels() map[string]string {
	return g.Spec.Template.Labels
}

func (g *TiFlashGroup) TemplateAnnotations() map[string]string {
	return g.Spec.Template.Annotations
}

func (g *TiFlashGroup) Features() []metav1alpha1.Feature {
	return g.Spec.Features
}
