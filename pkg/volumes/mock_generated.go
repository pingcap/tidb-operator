// Copyright 2024 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tidb-operator/pkg/volumes (interfaces: Modifier,ModifierFactory)

// Package volumes is a generated GoMock package.
package volumes

import (
	context "context"
	reflect "reflect"

	features "github.com/pingcap/tidb-operator/pkg/features"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockModifier is a mock of Modifier interface.
type MockModifier struct {
	ctrl     *gomock.Controller
	recorder *MockModifierMockRecorder
	isgomock struct{}
}

// MockModifierMockRecorder is the mock recorder for MockModifier.
type MockModifierMockRecorder struct {
	mock *MockModifier
}

// NewMockModifier creates a new mock instance.
func NewMockModifier(ctrl *gomock.Controller) *MockModifier {
	mock := &MockModifier{ctrl: ctrl}
	mock.recorder = &MockModifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModifier) EXPECT() *MockModifierMockRecorder {
	return m.recorder
}

// GetActualVolume mocks base method.
func (m *MockModifier) GetActualVolume(ctx context.Context, expect, current *v1.PersistentVolumeClaim) (*ActualVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActualVolume", ctx, expect, current)
	ret0, _ := ret[0].(*ActualVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActualVolume indicates an expected call of GetActualVolume.
func (mr *MockModifierMockRecorder) GetActualVolume(ctx, expect, current any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActualVolume", reflect.TypeOf((*MockModifier)(nil).GetActualVolume), ctx, expect, current)
}

// Modify mocks base method.
func (m *MockModifier) Modify(ctx context.Context, vol *ActualVolume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Modify", ctx, vol)
	ret0, _ := ret[0].(error)
	return ret0
}

// Modify indicates an expected call of Modify.
func (mr *MockModifierMockRecorder) Modify(ctx, vol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockModifier)(nil).Modify), ctx, vol)
}

// ShouldModify mocks base method.
func (m *MockModifier) ShouldModify(ctx context.Context, actual *ActualVolume) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldModify", ctx, actual)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldModify indicates an expected call of ShouldModify.
func (mr *MockModifierMockRecorder) ShouldModify(ctx, actual any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldModify", reflect.TypeOf((*MockModifier)(nil).ShouldModify), ctx, actual)
}

// MockModifierFactory is a mock of ModifierFactory interface.
type MockModifierFactory struct {
	ctrl     *gomock.Controller
	recorder *MockModifierFactoryMockRecorder
	isgomock struct{}
}

// MockModifierFactoryMockRecorder is the mock recorder for MockModifierFactory.
type MockModifierFactoryMockRecorder struct {
	mock *MockModifierFactory
}

// NewMockModifierFactory creates a new mock instance.
func NewMockModifierFactory(ctrl *gomock.Controller) *MockModifierFactory {
	mock := &MockModifierFactory{ctrl: ctrl}
	mock.recorder = &MockModifierFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModifierFactory) EXPECT() *MockModifierFactoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockModifierFactory) New(fg features.Gates) Modifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", fg)
	ret0, _ := ret[0].(Modifier)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockModifierFactoryMockRecorder) New(fg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockModifierFactory)(nil).New), fg)
}
