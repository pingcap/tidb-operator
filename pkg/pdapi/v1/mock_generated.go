// Copyright 2024 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tidb-operator/pkg/pdapi/v1 (interfaces: PDClient)

// Package pdapi is a generated GoMock package.
package pdapi

import (
	context "context"
	reflect "reflect"

	metapb "github.com/pingcap/kvproto/pkg/metapb"
	pdpb "github.com/pingcap/kvproto/pkg/pdpb"
	gomock "go.uber.org/mock/gomock"
)

// MockPDClient is a mock of PDClient interface.
type MockPDClient struct {
	ctrl     *gomock.Controller
	recorder *MockPDClientMockRecorder
	isgomock struct{}
}

// MockPDClientMockRecorder is the mock recorder for MockPDClient.
type MockPDClientMockRecorder struct {
	mock *MockPDClient
}

// NewMockPDClient creates a new mock instance.
func NewMockPDClient(ctrl *gomock.Controller) *MockPDClient {
	mock := &MockPDClient{ctrl: ctrl}
	mock.recorder = &MockPDClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPDClient) EXPECT() *MockPDClientMockRecorder {
	return m.recorder
}

// BeginEvictLeader mocks base method.
func (m *MockPDClient) BeginEvictLeader(ctx context.Context, storeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginEvictLeader", ctx, storeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeginEvictLeader indicates an expected call of BeginEvictLeader.
func (mr *MockPDClientMockRecorder) BeginEvictLeader(ctx, storeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginEvictLeader", reflect.TypeOf((*MockPDClient)(nil).BeginEvictLeader), ctx, storeID)
}

// DeleteMember mocks base method.
func (m *MockPDClient) DeleteMember(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockPDClientMockRecorder) DeleteMember(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockPDClient)(nil).DeleteMember), ctx, name)
}

// DeleteMemberByID mocks base method.
func (m *MockPDClient) DeleteMemberByID(ctx context.Context, memberID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMemberByID", ctx, memberID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMemberByID indicates an expected call of DeleteMemberByID.
func (mr *MockPDClientMockRecorder) DeleteMemberByID(ctx, memberID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMemberByID", reflect.TypeOf((*MockPDClient)(nil).DeleteMemberByID), ctx, memberID)
}

// DeleteStore mocks base method.
func (m *MockPDClient) DeleteStore(ctx context.Context, storeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStore", ctx, storeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStore indicates an expected call of DeleteStore.
func (mr *MockPDClientMockRecorder) DeleteStore(ctx, storeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStore", reflect.TypeOf((*MockPDClient)(nil).DeleteStore), ctx, storeID)
}

// EndEvictLeader mocks base method.
func (m *MockPDClient) EndEvictLeader(ctx context.Context, storeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndEvictLeader", ctx, storeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EndEvictLeader indicates an expected call of EndEvictLeader.
func (mr *MockPDClientMockRecorder) EndEvictLeader(ctx, storeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndEvictLeader", reflect.TypeOf((*MockPDClient)(nil).EndEvictLeader), ctx, storeID)
}

// GetCluster mocks base method.
func (m *MockPDClient) GetCluster(ctx context.Context) (*metapb.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", ctx)
	ret0, _ := ret[0].(*metapb.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockPDClientMockRecorder) GetCluster(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockPDClient)(nil).GetCluster), ctx)
}

// GetConfig mocks base method.
func (m *MockPDClient) GetConfig(ctx context.Context) (*PDConfigFromAPI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", ctx)
	ret0, _ := ret[0].(*PDConfigFromAPI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockPDClientMockRecorder) GetConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockPDClient)(nil).GetConfig), ctx)
}

// GetEvictLeaderScheduler mocks base method.
func (m *MockPDClient) GetEvictLeaderScheduler(ctx context.Context, storeID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvictLeaderScheduler", ctx, storeID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvictLeaderScheduler indicates an expected call of GetEvictLeaderScheduler.
func (mr *MockPDClientMockRecorder) GetEvictLeaderScheduler(ctx, storeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvictLeaderScheduler", reflect.TypeOf((*MockPDClient)(nil).GetEvictLeaderScheduler), ctx, storeID)
}

// GetEvictLeaderSchedulers mocks base method.
func (m *MockPDClient) GetEvictLeaderSchedulers(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvictLeaderSchedulers", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvictLeaderSchedulers indicates an expected call of GetEvictLeaderSchedulers.
func (mr *MockPDClientMockRecorder) GetEvictLeaderSchedulers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvictLeaderSchedulers", reflect.TypeOf((*MockPDClient)(nil).GetEvictLeaderSchedulers), ctx)
}

// GetHealth mocks base method.
func (m *MockPDClient) GetHealth(ctx context.Context) (*HealthInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealth", ctx)
	ret0, _ := ret[0].(*HealthInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealth indicates an expected call of GetHealth.
func (mr *MockPDClientMockRecorder) GetHealth(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealth", reflect.TypeOf((*MockPDClient)(nil).GetHealth), ctx)
}

// GetMSMembers mocks base method.
func (m *MockPDClient) GetMSMembers(ctx context.Context, service string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMSMembers", ctx, service)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMSMembers indicates an expected call of GetMSMembers.
func (mr *MockPDClientMockRecorder) GetMSMembers(ctx, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMSMembers", reflect.TypeOf((*MockPDClient)(nil).GetMSMembers), ctx, service)
}

// GetMembers mocks base method.
func (m *MockPDClient) GetMembers(ctx context.Context) (*MembersInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembers", ctx)
	ret0, _ := ret[0].(*MembersInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembers indicates an expected call of GetMembers.
func (mr *MockPDClientMockRecorder) GetMembers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembers", reflect.TypeOf((*MockPDClient)(nil).GetMembers), ctx)
}

// GetPDEtcdClient mocks base method.
func (m *MockPDClient) GetPDEtcdClient() (PDEtcdClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPDEtcdClient")
	ret0, _ := ret[0].(PDEtcdClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPDEtcdClient indicates an expected call of GetPDEtcdClient.
func (mr *MockPDClientMockRecorder) GetPDEtcdClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPDEtcdClient", reflect.TypeOf((*MockPDClient)(nil).GetPDEtcdClient))
}

// GetPDLeader mocks base method.
func (m *MockPDClient) GetPDLeader(ctx context.Context) (*pdpb.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPDLeader", ctx)
	ret0, _ := ret[0].(*pdpb.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPDLeader indicates an expected call of GetPDLeader.
func (mr *MockPDClientMockRecorder) GetPDLeader(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPDLeader", reflect.TypeOf((*MockPDClient)(nil).GetPDLeader), ctx)
}

// GetStore mocks base method.
func (m *MockPDClient) GetStore(ctx context.Context, storeID string) (*StoreInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStore", ctx, storeID)
	ret0, _ := ret[0].(*StoreInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStore indicates an expected call of GetStore.
func (mr *MockPDClientMockRecorder) GetStore(ctx, storeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStore", reflect.TypeOf((*MockPDClient)(nil).GetStore), ctx, storeID)
}

// GetStores mocks base method.
func (m *MockPDClient) GetStores(ctx context.Context) (*StoresInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStores", ctx)
	ret0, _ := ret[0].(*StoresInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStores indicates an expected call of GetStores.
func (mr *MockPDClientMockRecorder) GetStores(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStores", reflect.TypeOf((*MockPDClient)(nil).GetStores), ctx)
}

// SetStoreLabels mocks base method.
func (m *MockPDClient) SetStoreLabels(ctx context.Context, storeID uint64, labels map[string]string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStoreLabels", ctx, storeID, labels)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStoreLabels indicates an expected call of SetStoreLabels.
func (mr *MockPDClientMockRecorder) SetStoreLabels(ctx, storeID, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStoreLabels", reflect.TypeOf((*MockPDClient)(nil).SetStoreLabels), ctx, storeID, labels)
}

// TransferPDLeader mocks base method.
func (m *MockPDClient) TransferPDLeader(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferPDLeader", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferPDLeader indicates an expected call of TransferPDLeader.
func (mr *MockPDClientMockRecorder) TransferPDLeader(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferPDLeader", reflect.TypeOf((*MockPDClient)(nil).TransferPDLeader), ctx, name)
}

// UpdateReplicationConfig mocks base method.
func (m *MockPDClient) UpdateReplicationConfig(ctx context.Context, config PDReplicationConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationConfig", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReplicationConfig indicates an expected call of UpdateReplicationConfig.
func (mr *MockPDClientMockRecorder) UpdateReplicationConfig(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfig", reflect.TypeOf((*MockPDClient)(nil).UpdateReplicationConfig), ctx, config)
}
