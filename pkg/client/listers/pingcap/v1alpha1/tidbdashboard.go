// Copyright PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pingcap/tidb-operator/pkg/apis/pingcap/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TidbDashboardLister helps list TidbDashboards.
// All objects returned here must be treated as read-only.
type TidbDashboardLister interface {
	// List lists all TidbDashboards in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TidbDashboard, err error)
	// TidbDashboards returns an object that can list and get TidbDashboards.
	TidbDashboards(namespace string) TidbDashboardNamespaceLister
	TidbDashboardListerExpansion
}

// tidbDashboardLister implements the TidbDashboardLister interface.
type tidbDashboardLister struct {
	indexer cache.Indexer
}

// NewTidbDashboardLister returns a new TidbDashboardLister.
func NewTidbDashboardLister(indexer cache.Indexer) TidbDashboardLister {
	return &tidbDashboardLister{indexer: indexer}
}

// List lists all TidbDashboards in the indexer.
func (s *tidbDashboardLister) List(selector labels.Selector) (ret []*v1alpha1.TidbDashboard, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TidbDashboard))
	})
	return ret, err
}

// TidbDashboards returns an object that can list and get TidbDashboards.
func (s *tidbDashboardLister) TidbDashboards(namespace string) TidbDashboardNamespaceLister {
	return tidbDashboardNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TidbDashboardNamespaceLister helps list and get TidbDashboards.
// All objects returned here must be treated as read-only.
type TidbDashboardNamespaceLister interface {
	// List lists all TidbDashboards in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TidbDashboard, err error)
	// Get retrieves the TidbDashboard from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TidbDashboard, error)
	TidbDashboardNamespaceListerExpansion
}

// tidbDashboardNamespaceLister implements the TidbDashboardNamespaceLister
// interface.
type tidbDashboardNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TidbDashboards in the indexer for a given namespace.
func (s tidbDashboardNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TidbDashboard, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TidbDashboard))
	})
	return ret, err
}

// Get retrieves the TidbDashboard from the indexer for a given namespace and name.
func (s tidbDashboardNamespaceLister) Get(name string) (*v1alpha1.TidbDashboard, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tidbdashboard"), name)
	}
	return obj.(*v1alpha1.TidbDashboard), nil
}
