// Copyright PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pingcap/tidb-operator/pkg/apis/pingcap/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TiDBNGMonitoringLister helps list TiDBNGMonitorings.
// All objects returned here must be treated as read-only.
type TiDBNGMonitoringLister interface {
	// List lists all TiDBNGMonitorings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TiDBNGMonitoring, err error)
	// TiDBNGMonitorings returns an object that can list and get TiDBNGMonitorings.
	TiDBNGMonitorings(namespace string) TiDBNGMonitoringNamespaceLister
	TiDBNGMonitoringListerExpansion
}

// tiDBNGMonitoringLister implements the TiDBNGMonitoringLister interface.
type tiDBNGMonitoringLister struct {
	indexer cache.Indexer
}

// NewTiDBNGMonitoringLister returns a new TiDBNGMonitoringLister.
func NewTiDBNGMonitoringLister(indexer cache.Indexer) TiDBNGMonitoringLister {
	return &tiDBNGMonitoringLister{indexer: indexer}
}

// List lists all TiDBNGMonitorings in the indexer.
func (s *tiDBNGMonitoringLister) List(selector labels.Selector) (ret []*v1alpha1.TiDBNGMonitoring, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TiDBNGMonitoring))
	})
	return ret, err
}

// TiDBNGMonitorings returns an object that can list and get TiDBNGMonitorings.
func (s *tiDBNGMonitoringLister) TiDBNGMonitorings(namespace string) TiDBNGMonitoringNamespaceLister {
	return tiDBNGMonitoringNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TiDBNGMonitoringNamespaceLister helps list and get TiDBNGMonitorings.
// All objects returned here must be treated as read-only.
type TiDBNGMonitoringNamespaceLister interface {
	// List lists all TiDBNGMonitorings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TiDBNGMonitoring, err error)
	// Get retrieves the TiDBNGMonitoring from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TiDBNGMonitoring, error)
	TiDBNGMonitoringNamespaceListerExpansion
}

// tiDBNGMonitoringNamespaceLister implements the TiDBNGMonitoringNamespaceLister
// interface.
type tiDBNGMonitoringNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TiDBNGMonitorings in the indexer for a given namespace.
func (s tiDBNGMonitoringNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TiDBNGMonitoring, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TiDBNGMonitoring))
	})
	return ret, err
}

// Get retrieves the TiDBNGMonitoring from the indexer for a given namespace and name.
func (s tiDBNGMonitoringNamespaceLister) Get(name string) (*v1alpha1.TiDBNGMonitoring, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tidbngmonitoring"), name)
	}
	return obj.(*v1alpha1.TiDBNGMonitoring), nil
}
