// Copyright PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pingcap/tidb-operator/pkg/apis/pingcap/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TiKVGroupLister helps list TiKVGroups.
type TiKVGroupLister interface {
	// List lists all TiKVGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.TiKVGroup, err error)
	// TiKVGroups returns an object that can list and get TiKVGroups.
	TiKVGroups(namespace string) TiKVGroupNamespaceLister
	TiKVGroupListerExpansion
}

// tiKVGroupLister implements the TiKVGroupLister interface.
type tiKVGroupLister struct {
	indexer cache.Indexer
}

// NewTiKVGroupLister returns a new TiKVGroupLister.
func NewTiKVGroupLister(indexer cache.Indexer) TiKVGroupLister {
	return &tiKVGroupLister{indexer: indexer}
}

// List lists all TiKVGroups in the indexer.
func (s *tiKVGroupLister) List(selector labels.Selector) (ret []*v1alpha1.TiKVGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TiKVGroup))
	})
	return ret, err
}

// TiKVGroups returns an object that can list and get TiKVGroups.
func (s *tiKVGroupLister) TiKVGroups(namespace string) TiKVGroupNamespaceLister {
	return tiKVGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TiKVGroupNamespaceLister helps list and get TiKVGroups.
type TiKVGroupNamespaceLister interface {
	// List lists all TiKVGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.TiKVGroup, err error)
	// Get retrieves the TiKVGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.TiKVGroup, error)
	TiKVGroupNamespaceListerExpansion
}

// tiKVGroupNamespaceLister implements the TiKVGroupNamespaceLister
// interface.
type tiKVGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TiKVGroups in the indexer for a given namespace.
func (s tiKVGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TiKVGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TiKVGroup))
	})
	return ret, err
}

// Get retrieves the TiKVGroup from the indexer for a given namespace and name.
func (s tiKVGroupNamespaceLister) Get(name string) (*v1alpha1.TiKVGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tikvgroup"), name)
	}
	return obj.(*v1alpha1.TiKVGroup), nil
}
