/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pingcap/tidb-operator/pkg/apis/pingcap.com/v1alpha1"
	scheme "github.com/pingcap/tidb-operator/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// TidbSidecarsGetter has a method to return a TidbSidecarInterface.
// A group's client should implement this interface.
type TidbSidecarsGetter interface {
	TidbSidecars(namespace string) TidbSidecarInterface
}

// TidbSidecarInterface has methods to work with TidbSidecar resources.
type TidbSidecarInterface interface {
	Create(*v1alpha1.TidbSidecar) (*v1alpha1.TidbSidecar, error)
	Update(*v1alpha1.TidbSidecar) (*v1alpha1.TidbSidecar, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.TidbSidecar, error)
	List(opts v1.ListOptions) (*v1alpha1.TidbSidecarList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.TidbSidecar, err error)
	TidbSidecarExpansion
}

// tidbSidecars implements TidbSidecarInterface
type tidbSidecars struct {
	client rest.Interface
	ns     string
}

// newTidbSidecars returns a TidbSidecars
func newTidbSidecars(c *PingcapV1alpha1Client, namespace string) *tidbSidecars {
	return &tidbSidecars{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the tidbSidecar, and returns the corresponding tidbSidecar object, and an error if there is any.
func (c *tidbSidecars) Get(name string, options v1.GetOptions) (result *v1alpha1.TidbSidecar, err error) {
	result = &v1alpha1.TidbSidecar{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("tidbsidecars").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of TidbSidecars that match those selectors.
func (c *tidbSidecars) List(opts v1.ListOptions) (result *v1alpha1.TidbSidecarList, err error) {
	result = &v1alpha1.TidbSidecarList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("tidbsidecars").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested tidbSidecars.
func (c *tidbSidecars) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("tidbsidecars").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a tidbSidecar and creates it.  Returns the server's representation of the tidbSidecar, and an error, if there is any.
func (c *tidbSidecars) Create(tidbSidecar *v1alpha1.TidbSidecar) (result *v1alpha1.TidbSidecar, err error) {
	result = &v1alpha1.TidbSidecar{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("tidbsidecars").
		Body(tidbSidecar).
		Do().
		Into(result)
	return
}

// Update takes the representation of a tidbSidecar and updates it. Returns the server's representation of the tidbSidecar, and an error, if there is any.
func (c *tidbSidecars) Update(tidbSidecar *v1alpha1.TidbSidecar) (result *v1alpha1.TidbSidecar, err error) {
	result = &v1alpha1.TidbSidecar{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("tidbsidecars").
		Name(tidbSidecar.Name).
		Body(tidbSidecar).
		Do().
		Into(result)
	return
}

// Delete takes name of the tidbSidecar and deletes it. Returns an error if one occurs.
func (c *tidbSidecars) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("tidbsidecars").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *tidbSidecars) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("tidbsidecars").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched tidbSidecar.
func (c *tidbSidecars) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.TidbSidecar, err error) {
	result = &v1alpha1.TidbSidecar{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("tidbsidecars").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
