// Copyright 2024 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tidb-operator/pkg/timanager/pd (interfaces: PDClient,StoreCache,MemberCache)

// Package pd is a generated GoMock package.
package pd

import (
	reflect "reflect"

	pdapi "github.com/pingcap/tidb-operator/pkg/pdapi/v1"
	timanager "github.com/pingcap/tidb-operator/pkg/timanager"
	v1 "github.com/pingcap/tidb-operator/pkg/timanager/apis/pd/v1"
	gomock "go.uber.org/mock/gomock"
	labels "k8s.io/apimachinery/pkg/labels"
)

// MockPDClient is a mock of PDClient interface.
type MockPDClient struct {
	ctrl     *gomock.Controller
	recorder *MockPDClientMockRecorder
	isgomock struct{}
}

// MockPDClientMockRecorder is the mock recorder for MockPDClient.
type MockPDClientMockRecorder struct {
	mock *MockPDClient
}

// NewMockPDClient creates a new mock instance.
func NewMockPDClient(ctrl *gomock.Controller) *MockPDClient {
	mock := &MockPDClient{ctrl: ctrl}
	mock.recorder = &MockPDClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPDClient) EXPECT() *MockPDClientMockRecorder {
	return m.recorder
}

// HasSynced mocks base method.
func (m *MockPDClient) HasSynced() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSynced")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSynced indicates an expected call of HasSynced.
func (mr *MockPDClientMockRecorder) HasSynced() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSynced", reflect.TypeOf((*MockPDClient)(nil).HasSynced))
}

// Members mocks base method.
func (m *MockPDClient) Members() timanager.RefreshableCacheLister[v1.Member, *v1.Member] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Members")
	ret0, _ := ret[0].(timanager.RefreshableCacheLister[v1.Member, *v1.Member])
	return ret0
}

// Members indicates an expected call of Members.
func (mr *MockPDClientMockRecorder) Members() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Members", reflect.TypeOf((*MockPDClient)(nil).Members))
}

// Stores mocks base method.
func (m *MockPDClient) Stores() timanager.RefreshableCacheLister[v1.Store, *v1.Store] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stores")
	ret0, _ := ret[0].(timanager.RefreshableCacheLister[v1.Store, *v1.Store])
	return ret0
}

// Stores indicates an expected call of Stores.
func (mr *MockPDClientMockRecorder) Stores() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stores", reflect.TypeOf((*MockPDClient)(nil).Stores))
}

// TSOMembers mocks base method.
func (m *MockPDClient) TSOMembers() timanager.RefreshableCacheLister[v1.TSOMember, *v1.TSOMember] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSOMembers")
	ret0, _ := ret[0].(timanager.RefreshableCacheLister[v1.TSOMember, *v1.TSOMember])
	return ret0
}

// TSOMembers indicates an expected call of TSOMembers.
func (mr *MockPDClientMockRecorder) TSOMembers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSOMembers", reflect.TypeOf((*MockPDClient)(nil).TSOMembers))
}

// Underlay mocks base method.
func (m *MockPDClient) Underlay() pdapi.PDClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Underlay")
	ret0, _ := ret[0].(pdapi.PDClient)
	return ret0
}

// Underlay indicates an expected call of Underlay.
func (mr *MockPDClientMockRecorder) Underlay() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Underlay", reflect.TypeOf((*MockPDClient)(nil).Underlay))
}

// MockStoreCache is a mock of StoreCache interface.
type MockStoreCache[T any, PT timanager.Object[T]] struct {
	ctrl     *gomock.Controller
	recorder *MockStoreCacheMockRecorder[T, PT]
	isgomock struct{}
}

// MockStoreCacheMockRecorder is the mock recorder for MockStoreCache.
type MockStoreCacheMockRecorder[T any, PT timanager.Object[T]] struct {
	mock *MockStoreCache[T, PT]
}

// NewMockStoreCache creates a new mock instance.
func NewMockStoreCache[T any, PT timanager.Object[T]](ctrl *gomock.Controller) *MockStoreCache[T, PT] {
	mock := &MockStoreCache[T, PT]{ctrl: ctrl}
	mock.recorder = &MockStoreCacheMockRecorder[T, PT]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreCache[T, PT]) EXPECT() *MockStoreCacheMockRecorder[T, PT] {
	return m.recorder
}

// Get mocks base method.
func (m *MockStoreCache[T, PT]) Get(name string) (*v1.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*v1.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStoreCacheMockRecorder[T, PT]) Get(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStoreCache[T, PT])(nil).Get), name)
}

// List mocks base method.
func (m *MockStoreCache[T, PT]) List(selector labels.Selector) ([]*v1.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", selector)
	ret0, _ := ret[0].([]*v1.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStoreCacheMockRecorder[T, PT]) List(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStoreCache[T, PT])(nil).List), selector)
}

// Refresh mocks base method.
func (m *MockStoreCache[T, PT]) Refresh() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Refresh")
}

// Refresh indicates an expected call of Refresh.
func (mr *MockStoreCacheMockRecorder[T, PT]) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockStoreCache[T, PT])(nil).Refresh))
}

// MockMemberCache is a mock of MemberCache interface.
type MockMemberCache[T any, PT timanager.Object[T]] struct {
	ctrl     *gomock.Controller
	recorder *MockMemberCacheMockRecorder[T, PT]
	isgomock struct{}
}

// MockMemberCacheMockRecorder is the mock recorder for MockMemberCache.
type MockMemberCacheMockRecorder[T any, PT timanager.Object[T]] struct {
	mock *MockMemberCache[T, PT]
}

// NewMockMemberCache creates a new mock instance.
func NewMockMemberCache[T any, PT timanager.Object[T]](ctrl *gomock.Controller) *MockMemberCache[T, PT] {
	mock := &MockMemberCache[T, PT]{ctrl: ctrl}
	mock.recorder = &MockMemberCacheMockRecorder[T, PT]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberCache[T, PT]) EXPECT() *MockMemberCacheMockRecorder[T, PT] {
	return m.recorder
}

// Get mocks base method.
func (m *MockMemberCache[T, PT]) Get(name string) (*v1.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*v1.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMemberCacheMockRecorder[T, PT]) Get(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMemberCache[T, PT])(nil).Get), name)
}

// List mocks base method.
func (m *MockMemberCache[T, PT]) List(selector labels.Selector) ([]*v1.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", selector)
	ret0, _ := ret[0].([]*v1.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMemberCacheMockRecorder[T, PT]) List(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMemberCache[T, PT])(nil).List), selector)
}

// Refresh mocks base method.
func (m *MockMemberCache[T, PT]) Refresh() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Refresh")
}

// Refresh indicates an expected call of Refresh.
func (mr *MockMemberCacheMockRecorder[T, PT]) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockMemberCache[T, PT])(nil).Refresh))
}
