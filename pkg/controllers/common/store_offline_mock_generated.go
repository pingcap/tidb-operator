// Copyright 2024 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tidb-operator/pkg/controllers/common (interfaces: StoreOfflineReconcileContext)

// Package common is a generated GoMock package.
package common

import (
	reflect "reflect"

	pd "github.com/pingcap/tidb-operator/pkg/timanager/pd"
	gomock "go.uber.org/mock/gomock"
)

// MockStoreOfflineReconcileContext is a mock of StoreOfflineReconcileContext interface.
type MockStoreOfflineReconcileContext struct {
	ctrl     *gomock.Controller
	recorder *MockStoreOfflineReconcileContextMockRecorder
	isgomock struct{}
}

// MockStoreOfflineReconcileContextMockRecorder is the mock recorder for MockStoreOfflineReconcileContext.
type MockStoreOfflineReconcileContextMockRecorder struct {
	mock *MockStoreOfflineReconcileContext
}

// NewMockStoreOfflineReconcileContext creates a new mock instance.
func NewMockStoreOfflineReconcileContext(ctrl *gomock.Controller) *MockStoreOfflineReconcileContext {
	mock := &MockStoreOfflineReconcileContext{ctrl: ctrl}
	mock.recorder = &MockStoreOfflineReconcileContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreOfflineReconcileContext) EXPECT() *MockStoreOfflineReconcileContextMockRecorder {
	return m.recorder
}

// GetLeaderCount mocks base method.
func (m *MockStoreOfflineReconcileContext) GetLeaderCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaderCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetLeaderCount indicates an expected call of GetLeaderCount.
func (mr *MockStoreOfflineReconcileContextMockRecorder) GetLeaderCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaderCount", reflect.TypeOf((*MockStoreOfflineReconcileContext)(nil).GetLeaderCount))
}

// GetPDClient mocks base method.
func (m *MockStoreOfflineReconcileContext) GetPDClient() pd.PDClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPDClient")
	ret0, _ := ret[0].(pd.PDClient)
	return ret0
}

// GetPDClient indicates an expected call of GetPDClient.
func (mr *MockStoreOfflineReconcileContextMockRecorder) GetPDClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPDClient", reflect.TypeOf((*MockStoreOfflineReconcileContext)(nil).GetPDClient))
}

// GetRegionCount mocks base method.
func (m *MockStoreOfflineReconcileContext) GetRegionCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetRegionCount indicates an expected call of GetRegionCount.
func (mr *MockStoreOfflineReconcileContextMockRecorder) GetRegionCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionCount", reflect.TypeOf((*MockStoreOfflineReconcileContext)(nil).GetRegionCount))
}

// GetStoreID mocks base method.
func (m *MockStoreOfflineReconcileContext) GetStoreID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStoreID indicates an expected call of GetStoreID.
func (mr *MockStoreOfflineReconcileContextMockRecorder) GetStoreID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreID", reflect.TypeOf((*MockStoreOfflineReconcileContext)(nil).GetStoreID))
}

// GetStoreState mocks base method.
func (m *MockStoreOfflineReconcileContext) GetStoreState() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreState")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStoreState indicates an expected call of GetStoreState.
func (mr *MockStoreOfflineReconcileContextMockRecorder) GetStoreState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreState", reflect.TypeOf((*MockStoreOfflineReconcileContext)(nil).GetStoreState))
}

// IsStoreBusy mocks base method.
func (m *MockStoreOfflineReconcileContext) IsStoreBusy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStoreBusy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStoreBusy indicates an expected call of IsStoreBusy.
func (mr *MockStoreOfflineReconcileContextMockRecorder) IsStoreBusy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStoreBusy", reflect.TypeOf((*MockStoreOfflineReconcileContext)(nil).IsStoreBusy))
}

// IsStoreUp mocks base method.
func (m *MockStoreOfflineReconcileContext) IsStoreUp() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStoreUp")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStoreUp indicates an expected call of IsStoreUp.
func (mr *MockStoreOfflineReconcileContextMockRecorder) IsStoreUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStoreUp", reflect.TypeOf((*MockStoreOfflineReconcileContext)(nil).IsStoreUp))
}

// SetStatusChanged mocks base method.
func (m *MockStoreOfflineReconcileContext) SetStatusChanged() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusChanged")
}

// SetStatusChanged indicates an expected call of SetStatusChanged.
func (mr *MockStoreOfflineReconcileContextMockRecorder) SetStatusChanged() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusChanged", reflect.TypeOf((*MockStoreOfflineReconcileContext)(nil).SetStatusChanged))
}

// StoreNotExists mocks base method.
func (m *MockStoreOfflineReconcileContext) StoreNotExists() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreNotExists")
	ret0, _ := ret[0].(bool)
	return ret0
}

// StoreNotExists indicates an expected call of StoreNotExists.
func (mr *MockStoreOfflineReconcileContextMockRecorder) StoreNotExists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreNotExists", reflect.TypeOf((*MockStoreOfflineReconcileContext)(nil).StoreNotExists))
}
